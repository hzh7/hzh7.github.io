<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Docker安装ElasticSearch和kibana</title>
    <link href="/2021/02/07/Docker%E5%AE%89%E8%A3%85ElasticSearch%E5%92%8Ckibana/"/>
    <url>/2021/02/07/Docker%E5%AE%89%E8%A3%85ElasticSearch%E5%92%8Ckibana/</url>
    
    <content type="html"><![CDATA[<!-- @format --><h2 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h2><h3 id="安装-ElasticSearch"><a href="#安装-ElasticSearch" class="headerlink" title="安装 ElasticSearch"></a>安装 ElasticSearch</h3><pre><code class="hljs bash">docker pull elasticsearch:7.4.2docker pull kibana:7.4.2</code></pre><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><pre><code class="hljs bash">mkdir -p /mydata/elasticsearch/configmkdir -p /mydata/elasticsearch/data<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;http.host: 0.0.0.0&quot;</span> &gt;/mydata/elasticsearch/config/elasticsearch.ymlchmod -R 777 /mydata/elasticsearch/</code></pre><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><pre><code class="hljs bash">docker run --name elasticsearch -p 9200:9200 -p 9300:9300 \-e  <span class="hljs-string">&quot;discovery.type=single-node&quot;</span> \-e ES_JAVA_OPTS=<span class="hljs-string">&quot;-Xms64m -Xmx512m&quot;</span> \-v /mydata/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml \-v /mydata/elasticsearch/data:/usr/share/elasticsearch/data \-v  /mydata/elasticsearch/plugins:/usr/share/elasticsearch/plugins \-d elasticsearch:7.4.2</code></pre><h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><p><a href="http://pi:9200/">http://pi:9200</a></p><pre><code class="hljs json">&#123;  <span class="hljs-attr">&quot;name&quot;</span> : <span class="hljs-string">&quot;60bd81d4dd49&quot;</span>,  <span class="hljs-attr">&quot;cluster_name&quot;</span> : <span class="hljs-string">&quot;elasticsearch&quot;</span>,  <span class="hljs-attr">&quot;cluster_uuid&quot;</span> : <span class="hljs-string">&quot;xHVH75NkTh2fOqIUGnzfoQ&quot;</span>,  <span class="hljs-attr">&quot;version&quot;</span> : &#123;    <span class="hljs-attr">&quot;number&quot;</span> : <span class="hljs-string">&quot;7.4.2&quot;</span>,    <span class="hljs-attr">&quot;build_flavor&quot;</span> : <span class="hljs-string">&quot;default&quot;</span>,    <span class="hljs-attr">&quot;build_type&quot;</span> : <span class="hljs-string">&quot;docker&quot;</span>,    <span class="hljs-attr">&quot;build_hash&quot;</span> : <span class="hljs-string">&quot;2f90bbf7b93631e52bafb59b3b049cb44ec25e96&quot;</span>,    <span class="hljs-attr">&quot;build_date&quot;</span> : <span class="hljs-string">&quot;2019-10-28T20:40:44.881551Z&quot;</span>,    <span class="hljs-attr">&quot;build_snapshot&quot;</span> : <span class="hljs-literal">false</span>,    <span class="hljs-attr">&quot;lucene_version&quot;</span> : <span class="hljs-string">&quot;8.2.0&quot;</span>,    <span class="hljs-attr">&quot;minimum_wire_compatibility_version&quot;</span> : <span class="hljs-string">&quot;6.8.0&quot;</span>,    <span class="hljs-attr">&quot;minimum_index_compatibility_version&quot;</span> : <span class="hljs-string">&quot;6.0.0-beta1&quot;</span>  &#125;,  <span class="hljs-attr">&quot;tagline&quot;</span> : <span class="hljs-string">&quot;You Know, for Search&quot;</span>&#125;</code></pre><h2 id="kibana"><a href="#kibana" class="headerlink" title="kibana"></a>kibana</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre><code class="hljs bash">docker run --name kibana -e ELASTICSEARCH_HOSTS=http://ip:9200 -p 5601:5601 -d kibana:7.4.2</code></pre><h3 id="访问-1"><a href="#访问-1" class="headerlink" title="访问"></a>访问</h3><pre><code class="hljs bash">http://ip:5601/</code></pre><p><img src="/2021/02/07/Docker%E5%AE%89%E8%A3%85ElasticSearch%E5%92%8Ckibana/image-20210206183257708.png" alt="image-20210206183257708"></p><h3 id="设置开机启动"><a href="#设置开机启动" class="headerlink" title="设置开机启动"></a>设置开机启动</h3><pre><code class="hljs bash">docker update elasticsearch --restart=alwaysdocker update kibana  --restart=always</code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.5/getting-started-search.html">https://www.elastic.co/guide/en/elasticsearch/reference/7.5/getting-started-search.html</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>ElasticSearch</tag>
      
      <tag>kibana</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Go_mod_学习入门</title>
    <link href="/2021/01/09/Go-mod-%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8/"/>
    <url>/2021/01/09/Go-mod-%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Go-mod-学习入门"><a href="#Go-mod-学习入门" class="headerlink" title="Go mod 学习入门"></a>Go mod 学习入门</h1><p>参考：<a href="https://cloud.tencent.com/developer/article/1593734">https://cloud.tencent.com/developer/article/1593734</a></p><h2 id="用mod-创建新项目"><a href="#用mod-创建新项目" class="headerlink" title="用mod 创建新项目"></a>用mod 创建新项目</h2><ol><li><p>在<code>GOPATH 目录之外</code>新建一个目录，并使用<code>go mod init</code> 初始化生成<code>go.mod</code> 文件</p> <pre><code class="hljs bash">$ go mod init hello                              go: creating new go.mod: module hello                    $ cat go.modmodule hellogo 1.14</code></pre><p>go.mod 提供了<code>module</code>, <code>require</code>、<code>replace</code>和<code>exclude</code> 四个命令</p><ul><li><code>module</code>  语句指定包的名字（路径）</li><li><code>require</code> 语句指定的依赖项模块</li><li><code>replace</code> 语句可以替换依赖项模块</li></ul></li></ol><ul><li><code>exclude</code> 语句可以忽略依赖项模块</li></ul><ol start="2"><li><p>编写一个 server.go 文件，写入以下代码：</p><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> (<span class="hljs-string">&quot;net/http&quot;</span><span class="hljs-string">&quot;github.com/labstack/echo&quot;</span>)<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;e := echo.New()e.GET(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c echo.Context)</span> <span class="hljs-title">error</span></span> &#123;<span class="hljs-keyword">return</span> c.String(http.StatusOK, <span class="hljs-string">&quot;Hello, World!&quot;</span>)&#125;)e.Logger.Fatal(e.Start(<span class="hljs-string">&quot;:1323&quot;</span>))&#125;</code></pre></li></ol><ol start="3"><li><p>执行 <code>go run server.go</code> 运行代码会发现 go mod 会自动查找依赖自动下载：</p> <pre><code class="hljs bash">$ go run server.gogo: finding module <span class="hljs-keyword">for</span> package github.com/labstack/<span class="hljs-built_in">echo</span>go: downloading github.com/labstack/<span class="hljs-built_in">echo</span> v1.4.4go: downloading github.com/labstack/<span class="hljs-built_in">echo</span> v3.3.10+incompatiblego: found github.com/labstack/<span class="hljs-built_in">echo</span> <span class="hljs-keyword">in</span> github.com/labstack/<span class="hljs-built_in">echo</span> v3.3.10+incompatiblego: finding module <span class="hljs-keyword">for</span> package github.com/labstack/gommon/colorgo: finding module <span class="hljs-keyword">for</span> package golang.org/x/crypto/acme/autocertgo: finding module <span class="hljs-keyword">for</span> package github.com/labstack/gommon/<span class="hljs-built_in">log</span>go: downloading github.com/labstack/gommon v0.3.0go: downloading golang.org/x/crypto v0.0.0-20201221181555-eec23a3978adgo: found github.com/labstack/gommon/color <span class="hljs-keyword">in</span> github.com/labstack/gommon v0.3.0go: found golang.org/x/crypto/acme/autocert <span class="hljs-keyword">in</span> golang.org/x/crypto v0.0.0-20201221181555-eec23a3978adgo: downloading github.com/mattn/go-colorable v0.1.2go: downloading github.com/mattn/go-isatty v0.0.9go: downloading golang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3go: downloading github.com/valyala/fasttemplate v1.0.1go: downloading github.com/valyala/bytebufferpool v1.0.0go: downloading golang.org/x/text v0.3.0   ____    __  / __/___/ /  ___ / _// __/ _ \/ _ \/___/\__/_//_/\___/ v3.3.10-devHigh performance, minimalist Go web frameworkhttps://echo.labstack.com____________________________________O/_______                                    O\⇨ http server started on [::]:1323</code></pre><p> 访问 <a href="http://localhost:1323/">http://localhost:1323/</a> ，代码运行成功</p><p> <img src="/2021/01/09/Go-mod-%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8/image-20210109104857113.png" alt="image-20210109104857113"></p></li><li><p>再次查看 <code>go.mod</code>:</p> <pre><code class="hljs mod">module hellogo 1.14require (github.com&#x2F;labstack&#x2F;echo v3.3.10+incompatible &#x2F;&#x2F; indirectgithub.com&#x2F;labstack&#x2F;gommon v0.3.0 &#x2F;&#x2F; indirectgolang.org&#x2F;x&#x2F;crypto v0.0.0-20201221181555-eec23a3978ad &#x2F;&#x2F; indirect)</code></pre><p>  go module 安装 package 的原則是先拉最新的 release tag，若无tag则拉最新的commit。go 会自动生成一个 go.sum 文件来记录 dependency tree</p></li><li><p>再次执行脚本 <code>go run server.go</code> 发现跳过了检查并安装依赖的步骤。</p></li><li><p>可以使用命令 <code>go list -m -u all</code> 来检查可以升级的package，使用<code>go get -u need-upgrade-package</code> 升级后会将新的依赖版本更新到go.mod * 也可以使用 <code>go get -u</code> 升级所有依赖</p></li><li><p>go get 升级</p><ul><li>运行 <code>go get -u</code> 将会升级到最新的次要版本或者修订版本(x.y.z, z是修订版本号， y是次要版本号)</li><li>运行 <code>go get -u=patch</code> 将会升级到最新的修订版本</li><li>运行 <code>go get package@version</code> 将会升级到指定的版本号version</li><li>运行<code>go get</code>如果有版本的更改，那么 go.mod 文件也会更改</li></ul></li></ol><h2 id="引入包"><a href="#引入包" class="headerlink" title="引入包"></a>引入包</h2><p>新建一个 <code>apis.go</code> 文件</p><pre><code class="hljs bash">$ tree.      ├── api│   └── apis.go├── go.mod├── go.sum└── server.go1 directory, 4 files</code></pre><pre><code class="hljs go"><span class="hljs-comment">// apis.go</span><span class="hljs-keyword">package</span> api<span class="hljs-keyword">import</span> (    <span class="hljs-string">&quot;net/http&quot;</span>    <span class="hljs-string">&quot;github.com/labstack/echo&quot;</span>)<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">HelloWorld</span><span class="hljs-params">(c echo.Context)</span> <span class="hljs-title">error</span></span> &#123;    <span class="hljs-keyword">return</span> c.JSON(http.StatusOK, <span class="hljs-string">&quot;hello world&quot;</span>)&#125;</code></pre><p>更新<code>server.go</code>：</p><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> (    api <span class="hljs-string">&quot;hello/api&quot;</span>  <span class="hljs-comment">// 这里使用的不是相对路径，hello 是 module的名字</span>    <span class="hljs-string">&quot;github.com/labstack/echo&quot;</span>)<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;    e := echo.New()    e.GET(<span class="hljs-string">&quot;/&quot;</span>, api.HelloWorld)    e.Logger.Fatal(e.Start(<span class="hljs-string">&quot;:1323&quot;</span>))&#125;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker安装ActiveMQ和RabbitMQ</title>
    <link href="/2020/12/21/Docker%E5%AE%89%E8%A3%85ActiveMQ%E5%92%8CRabbitMQ/"/>
    <url>/2020/12/21/Docker%E5%AE%89%E8%A3%85ActiveMQ%E5%92%8CRabbitMQ/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker安装ActiveMQ和RabbitMQ"><a href="#Docker安装ActiveMQ和RabbitMQ" class="headerlink" title="Docker安装ActiveMQ和RabbitMQ"></a>Docker安装ActiveMQ和RabbitMQ</h1><p>因学习Spring Boot 整合消息队列使用了ActiveMQ和RabbitMQ，记录下安装过程。</p><h2 id="docker下安装ActiveMQ"><a href="#docker下安装ActiveMQ" class="headerlink" title="docker下安装ActiveMQ"></a>docker下安装ActiveMQ</h2><blockquote><p><a href="https://developer.aliyun.com/article/572390">https://developer.aliyun.com/article/572390</a></p></blockquote><h3 id="查询Docker镜像"><a href="#查询Docker镜像" class="headerlink" title="查询Docker镜像"></a>查询Docker镜像</h3><pre><code class="hljs ebnf"><span class="hljs-attribute">docker search activemq</span></code></pre><h3 id="下载Docker镜像"><a href="#下载Docker镜像" class="headerlink" title="下载Docker镜像"></a>下载Docker镜像</h3><pre><code class="hljs nginx"><span class="hljs-attribute">docker</span> pull webcenter/activemq</code></pre><h3 id="创建-amp-运行ActiveMQ容器"><a href="#创建-amp-运行ActiveMQ容器" class="headerlink" title="创建&amp;运行ActiveMQ容器"></a>创建&amp;运行ActiveMQ容器</h3><pre><code class="hljs angelscript">docker run -d --name myactivemq -p <span class="hljs-number">61616</span>:<span class="hljs-number">61616</span> -p <span class="hljs-number">8161</span>:<span class="hljs-number">8161</span> webcenter/activemq</code></pre><h3 id="查看WEB管理页面："><a href="#查看WEB管理页面：" class="headerlink" title="查看WEB管理页面："></a>查看WEB管理页面：</h3><p>浏览器输入<code>http://127.0.0.1:8161/</code>，点击<code>Manage ActiveMQ broker</code>使用默认账号/密码：<code>admin</code>/<code>admin</code>进入查看</p><p><img src="/2020/12/21/Docker%E5%AE%89%E8%A3%85ActiveMQ%E5%92%8CRabbitMQ/image-20201219190238762.png" alt="image-20201219190238762"></p><p><img src="/2020/12/21/Docker%E5%AE%89%E8%A3%85ActiveMQ%E5%92%8CRabbitMQ/image-20201219191019378.png" alt="image-20201219191019378"></p><h2 id="docker安装-RabbitMQ"><a href="#docker安装-RabbitMQ" class="headerlink" title="docker安装 RabbitMQ"></a>docker安装 RabbitMQ</h2><blockquote><p><a href="https://www.jianshu.com/p/14ffe0f3db94">https://www.jianshu.com/p/14ffe0f3db94</a></p></blockquote><p>这里注意获取镜像的时候要获取management版本的，不要获取last版本的，management版本的才带有管理界面。</p><h3 id="获查询镜像"><a href="#获查询镜像" class="headerlink" title="获查询镜像"></a>获查询镜像</h3><pre><code class="hljs bash">docker search rabbitmq:management</code></pre><h3 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h3><pre><code class="hljs bash">docker pull rabbitmq:management</code></pre><p>可以看到如下结果</p><pre><code class="hljs bash">[hzh@localhost ~]$ docker pull rabbitmq:managementmanagement: Pulling from library/rabbitmqf22ccc0b8772: Pull complete3cf8fb62ba5f: Pull completee80c964ece6a: Pull completec1d2d6c5864b: Pull completea1d14468c24f: Pull completeac5224ea1eb3: Pull complete8da622546a6c: Pull complete5f20211ad28c: Pull complete553fbbbec0d8: Pull complete87e159513515: Pull completee7ad102c950f: Pull completefc664c88ed06: Pull complete4c05edd7de3b: Pull completeDigest: sha256:83fb3d109a3775bd8bc38629864bf54c074c41c5e34b608987b0b524ba707affStatus: Downloaded newer image <span class="hljs-keyword">for</span> rabbitmq:managementdocker.io/library/rabbitmq:management</code></pre><h3 id="运行镜像"><a href="#运行镜像" class="headerlink" title="运行镜像"></a>运行镜像</h3><pre><code class="hljs bash">[hzh@localhost ~]$ docker run -d -p 5672:5672 -p 15672:15672 --name rabbitmq rabbitmq:management57600974b4423618a9339d75212bba4770231e4b9605c81c8f73d53a7d4567f8</code></pre><h3 id="访问管理界面"><a href="#访问管理界面" class="headerlink" title="访问管理界面"></a>访问管理界面</h3><p>访问管理界面的地址就是 <a href="http://59.xx.xx.xx:15672，可以使用默认的账户登录，用户名和密码都guest，如：">http://59.xx.xx.xx:15672，可以使用默认的账户登录，用户名和密码都guest，如：</a></p><p><img src="/2020/12/21/Docker%E5%AE%89%E8%A3%85ActiveMQ%E5%92%8CRabbitMQ/image-20201220093624215.png" alt="image-20201220093624215"></p>]]></content>
    
    
    
    <tags>
      
      <tag>RabbitMQ</tag>
      
      <tag>ActiveMQ</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Security BCryptPasswordEncoder密码验证原理详解</title>
    <link href="/2020/12/12/Spring-Security-BCryptPasswordEncoder%E5%AF%86%E7%A0%81%E9%AA%8C%E8%AF%81%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3/"/>
    <url>/2020/12/12/Spring-Security-BCryptPasswordEncoder%E5%AF%86%E7%A0%81%E9%AA%8C%E8%AF%81%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring-Security-BCryptPasswordEncoder密码验证原理详解"><a href="#Spring-Security-BCryptPasswordEncoder密码验证原理详解" class="headerlink" title="Spring Security BCryptPasswordEncoder密码验证原理详解"></a>Spring Security BCryptPasswordEncoder密码验证原理详解</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>正好在学习 Spring Boot 密码加密，对 BCrypt 的加密原理很好奇，主要是不明白如何判断两个密文来自同一个明文，因为一个明文可产生多个不同的密文。</p><p>以下转自：<a href="https://www.zhangshengrong.com/p/9Oab8r76Xd/">https://www.zhangshengrong.com/p/9Oab8r76Xd/</a>  侵删</p><h2 id="一、加密算法和hash算法的区别"><a href="#一、加密算法和hash算法的区别" class="headerlink" title="一、加密算法和hash算法的区别"></a>一、加密算法和hash算法的区别</h2><p>加密算法是一种可逆的算法，基本过程就是对原来为明文的文件或数据按某种算法进行处理，使其成为不可读的一段代码为“密文”，但在用相应的密钥进行操作之后就可以得到原来的内容 。</p><p>哈希算法是一种不可逆的算法，是把任意长度的输入通过散列算法变换成固定长度的输出,输出就是散列值，不同的输入可能会散列成相同的输出，所以不可能从散列值来确定唯一的输入值。</p><h2 id="二、源码解析"><a href="#二、源码解析" class="headerlink" title="二、源码解析"></a>二、源码解析</h2><p>BCryptPasswordEncoder类实现了PasswordEncoder接口，这个接口中定义了两个方法</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">PasswordEncoder</span> </span>&#123;  <span class="hljs-function">String <span class="hljs-title">encode</span><span class="hljs-params">(CharSequence rawPassword)</span></span>;  <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">matches</span><span class="hljs-params">(CharSequence rawPassword, String encodedPassword)</span></span>;&#125;</code></pre><p>其中encode(…)是对字符串进行加密的方法，matches使用来校验传入的明文密码rawPassword是否和加密密码encodedPassword相匹配的方法。即对密码进行加密时调用encode，登录认证时调用matches</p><p>下面我们来看下BCryptPasswordEncoder类中这两个方法的具体实现</p><h3 id="encode方法"><a href="#encode方法" class="headerlink" title="encode方法"></a>encode方法</h3><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">encode</span><span class="hljs-params">(CharSequence rawPassword)</span> </span>&#123;  String salt;  <span class="hljs-keyword">if</span> (strength &gt; <span class="hljs-number">0</span>) &#123;    <span class="hljs-keyword">if</span> (random != <span class="hljs-keyword">null</span>) &#123;      salt = BCrypt.gensalt(strength, random);    &#125;    <span class="hljs-keyword">else</span> &#123;      salt = BCrypt.gensalt(strength);    &#125;  &#125;  <span class="hljs-keyword">else</span> &#123;    salt = BCrypt.gensalt();  &#125;  <span class="hljs-keyword">return</span> BCrypt.hashpw(rawPassword.toString(), salt);&#125;</code></pre><p>可以看到，这个方法中先基于某种规则得到了一个盐值，然后在调用BCrypt.hashpw方法，传入明文密码和盐值salt。所以我们再看下BCrypt.hashpw方法中做了什么</p><h3 id="BCrypt-hashpw方法"><a href="#BCrypt-hashpw方法" class="headerlink" title="BCrypt.hashpw方法"></a>BCrypt.hashpw方法</h3><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">hashpw</span><span class="hljs-params">(String password, String salt)</span> <span class="hljs-keyword">throws</span> IllegalArgumentException </span>&#123;    BCrypt B;    String real_salt;    <span class="hljs-keyword">byte</span> passwordb[], saltb[], hashed[];    <span class="hljs-keyword">char</span> minor = (<span class="hljs-keyword">char</span>) <span class="hljs-number">0</span>;    <span class="hljs-keyword">int</span> rounds, off = <span class="hljs-number">0</span>;    StringBuilder rs = <span class="hljs-keyword">new</span> StringBuilder();     <span class="hljs-keyword">if</span> (salt == <span class="hljs-keyword">null</span>) &#123;      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;salt cannot be null&quot;</span>);    &#125;     <span class="hljs-keyword">int</span> saltLength = salt.length();     <span class="hljs-keyword">if</span> (saltLength &lt; <span class="hljs-number">28</span>) &#123;      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;Invalid salt&quot;</span>);    &#125;     <span class="hljs-keyword">if</span> (salt.charAt(<span class="hljs-number">0</span>) != <span class="hljs-string">&#x27;$&#x27;</span> || salt.charAt(<span class="hljs-number">1</span>) != <span class="hljs-string">&#x27;2&#x27;</span>) &#123;      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;Invalid salt version&quot;</span>);    &#125;    <span class="hljs-keyword">if</span> (salt.charAt(<span class="hljs-number">2</span>) == <span class="hljs-string">&#x27;$&#x27;</span>) &#123;      off = <span class="hljs-number">3</span>;    &#125;    <span class="hljs-keyword">else</span> &#123;      minor = salt.charAt(<span class="hljs-number">2</span>);      <span class="hljs-keyword">if</span> (minor != <span class="hljs-string">&#x27;a&#x27;</span> || salt.charAt(<span class="hljs-number">3</span>) != <span class="hljs-string">&#x27;$&#x27;</span>) &#123;        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;Invalid salt revision&quot;</span>);      &#125;      off = <span class="hljs-number">4</span>;    &#125;     <span class="hljs-keyword">if</span> (saltLength - off &lt; <span class="hljs-number">25</span>) &#123;      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;Invalid salt&quot;</span>);    &#125;     <span class="hljs-comment">// Extract number of rounds</span>    <span class="hljs-keyword">if</span> (salt.charAt(off + <span class="hljs-number">2</span>) &gt; <span class="hljs-string">&#x27;$&#x27;</span>) &#123;      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;Missing salt rounds&quot;</span>);    &#125;    rounds = Integer.parseInt(salt.substring(off, off + <span class="hljs-number">2</span>));     real_salt = salt.substring(off + <span class="hljs-number">3</span>, off + <span class="hljs-number">25</span>);    <span class="hljs-keyword">try</span> &#123;      passwordb = (password + (minor &gt;= <span class="hljs-string">&#x27;a&#x27;</span> ? <span class="hljs-string">&quot;\000&quot;</span> : <span class="hljs-string">&quot;&quot;</span>)).getBytes(<span class="hljs-string">&quot;UTF-8&quot;</span>);    &#125;    <span class="hljs-keyword">catch</span> (UnsupportedEncodingException uee) &#123;      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> AssertionError(<span class="hljs-string">&quot;UTF-8 is not supported&quot;</span>);    &#125;     saltb = decode_base64(real_salt, BCRYPT_SALT_LEN);     B = <span class="hljs-keyword">new</span> BCrypt();    hashed = B.crypt_raw(passwordb, saltb, rounds);     rs.append(<span class="hljs-string">&quot;$2&quot;</span>);    <span class="hljs-keyword">if</span> (minor &gt;= <span class="hljs-string">&#x27;a&#x27;</span>) &#123;      rs.append(minor);    &#125;    rs.append(<span class="hljs-string">&quot;$&quot;</span>);    <span class="hljs-keyword">if</span> (rounds &lt; <span class="hljs-number">10</span>) &#123;      rs.append(<span class="hljs-string">&quot;0&quot;</span>);    &#125;    rs.append(rounds);    rs.append(<span class="hljs-string">&quot;$&quot;</span>);    encode_base64(saltb, saltb.length, rs);    encode_base64(hashed, bf_crypt_ciphertext.length * <span class="hljs-number">4</span> - <span class="hljs-number">1</span>, rs);    <span class="hljs-keyword">return</span> rs.toString();  &#125;</code></pre><p>可以看到，这个方法中先根据传入的盐值salt,然后基于某种规则从salt得到real_salt,后续的操作都是用这个real_salt来进行，最终得到加密字符串。</p><p>所以这里有一个重点:传入的盐值salt并不是最终用来加密的盐，方法中通过salt得到了real_salt，记住这一点，因为后边的匹配方法matches中要用到这一点。</p><h3 id="matches方法"><a href="#matches方法" class="headerlink" title="matches方法"></a>matches方法</h3><p>matches方法用来判断一个明文是否和一个加密字符串对应。</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">matches</span><span class="hljs-params">(CharSequence rawPassword, String encodedPassword)</span> </span>&#123;  <span class="hljs-keyword">if</span> (encodedPassword == <span class="hljs-keyword">null</span> || encodedPassword.length() == <span class="hljs-number">0</span>) &#123;    logger.warn(<span class="hljs-string">&quot;Empty encoded password&quot;</span>);    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;  &#125;   <span class="hljs-keyword">if</span> (!BCRYPT_PATTERN.matcher(encodedPassword).matches()) &#123;    logger.warn(<span class="hljs-string">&quot;Encoded password does not look like BCrypt&quot;</span>);    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;  &#125;  <span class="hljs-keyword">return</span> BCrypt.checkpw(rawPassword.toString(), encodedPassword);&#125;</code></pre><p>这个方法中先对密文字符串进行了一些校验，如果不符合规则直接返回不匹配，然后调用校验方法BCrypt.checkpw，第一个参数是明文，第二个参数是加密后的字符串。</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">checkpw</span><span class="hljs-params">(String plaintext, String hashed)</span> </span>&#123;  <span class="hljs-keyword">return</span> equalsNoEarlyReturn(hashed, hashpw(plaintext, hashed));&#125; <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equalsNoEarlyReturn</span><span class="hljs-params">(String a, String b)</span> </span>&#123;  <span class="hljs-keyword">char</span>[] caa = a.toCharArray();  <span class="hljs-keyword">char</span>[] cab = b.toCharArray();   <span class="hljs-keyword">if</span> (caa.length != cab.length) &#123;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;  &#125;   <span class="hljs-keyword">byte</span> ret = <span class="hljs-number">0</span>;  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; caa.length; i++) &#123;    ret |= caa[i] ^ cab[i];  &#125;  <span class="hljs-keyword">return</span> ret == <span class="hljs-number">0</span>;&#125;</code></pre><p>注意 equalsNoEarlyReturn(hashed, hashpw(plaintext, hashed))这里，第一个参数是加密后的字符串，而第二个参数是用刚才提过的hashpw方法对明文字符串进行加密。</p><p>hashpw(plaintext, hashed)第一个参数是明文，第二个参数是加密字符串，但是在这里是作为盐值salt传入的，所以就用到了刚才说的 hashpw 内部通过传入的salt得到real_salt，这样就保证了对现在要校验的明文的加密和得到已有密文的加密用的是同样的加密策略，算法和盐值都相同，这样如果新产生的密文和原来的密文相同，则这两个密文对应的明文字符串就是相等的。</p><p>这也说明了加密时使用的盐值被写在了最终生成的加密字符串中。</p><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>BCryptPasswordEncoder使用哈希算法+随机盐来对字符串加密。因为哈希是一种不可逆算法，所以密码认证时需要使用相同的算法+盐值来对待校验的明文进行加密，然后比较这两个密文来进行验证。BCryptPasswordEncoder在加密时通过从传入的salt中获取real_salt用来加密，保证了这一点。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>密文的组成：</p><p><img src="/2020/12/12/Spring-Security-BCryptPasswordEncoder%E5%AF%86%E7%A0%81%E9%AA%8C%E8%AF%81%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3/hash-anatomy.png" alt="Password Security Part 3: The Anatomy of a Hash"></p><p>跑几个代码验证一下：</p><pre><code class="hljs java"><span class="hljs-comment">// 手动生成不同的盐</span><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;    System.out.println(BCrypt.gensalt(<span class="hljs-string">&quot;$2a&quot;</span>, <span class="hljs-number">10</span>, <span class="hljs-keyword">new</span> SecureRandom()));&#125;<span class="hljs-comment">// 输出：</span>$<span class="hljs-number">2</span>b$<span class="hljs-number">10</span>$atrUZflT0Z96W5QzTH8QUu$<span class="hljs-number">2</span>b$<span class="hljs-number">10</span>$RCxX16r15iiJaP47FXmvHO$<span class="hljs-number">2</span>b$<span class="hljs-number">10</span>$CqTFDEm1VrzqUUA2jKX8X.$<span class="hljs-number">2</span>b$<span class="hljs-number">10</span>$<span class="hljs-number">4</span>orD1IF4CL81oIF60PD.Du$<span class="hljs-number">2</span>b$<span class="hljs-number">10</span>$L04sCj.<span class="hljs-number">38</span>QUgBAOPPMEbLO$<span class="hljs-number">2</span>b$<span class="hljs-number">10</span>$K1zE3wyJN3u./zzk7TH6v.$<span class="hljs-number">2</span>b$<span class="hljs-number">10</span>$FI9NbDk3TAaur51SSGRKAu$<span class="hljs-number">2</span>b$<span class="hljs-number">10</span>$cHus3QzX8YFCEpa06qrnbe$<span class="hljs-number">2</span>b$<span class="hljs-number">10</span>$/<span class="hljs-number">9</span>X3oRtruMy.dIwvWWIdQO$<span class="hljs-number">2</span>b$<span class="hljs-number">10</span>$EAnBZEeRJBqmxo.mh0kUrO</code></pre><pre><code class="hljs java"><span class="hljs-comment">// 随便利用一个盐对明文“123456”进行加密</span>System.out.println(BCrypt.hashpw(<span class="hljs-string">&quot;123456&quot;</span>, <span class="hljs-string">&quot;$2b$10$atrUZflT0Z96W5QzTH8QUu&quot;</span>));<span class="hljs-comment">// 输出</span>$<span class="hljs-number">2</span>b$<span class="hljs-number">10</span>$atrUZflT0Z96W5QzTH8QUus0onZp2bl8Q3r8rrmSevygkGqIbe/<span class="hljs-number">16</span></code></pre><pre><code class="hljs java"><span class="hljs-comment">// 使用相同的算法+盐值来对待校验的明文进行加密</span>System.out.println(BCrypt.hashpw(<span class="hljs-string">&quot;123456&quot;</span>.toString(), <span class="hljs-string">&quot;$2b$10$atrUZflT0Z96W5QzTH8QUus0onZp2bl8Q3r8rrmSevygkGqIbe/16&quot;</span>));System.out.println(BCrypt.checkpw(<span class="hljs-string">&quot;123456&quot;</span>.toString(), <span class="hljs-string">&quot;$2b$10$atrUZflT0Z96W5QzTH8QUus0onZp2bl8Q3r8rrmSevygkGqIbe/16&quot;</span>));<span class="hljs-comment">// 输出</span>$<span class="hljs-number">2</span>b$<span class="hljs-number">10</span>$atrUZflT0Z96W5QzTH8QUus0onZp2bl8Q3r8rrmSevygkGqIbe/<span class="hljs-number">16</span><span class="hljs-keyword">true</span>    <span class="hljs-comment">// 把上一步密文的 hashed text 部分替换</span>System.out.println(BCrypt.hashpw(<span class="hljs-string">&quot;123456&quot;</span>.toString(), <span class="hljs-string">&quot;$2b$10$atrUZflT0Z96W5QzTH8QUu1111111111111111111111111111111&quot;</span>));<span class="hljs-comment">// 输出依旧是：</span>$<span class="hljs-number">2</span>b$<span class="hljs-number">10</span>$atrUZflT0Z96W5QzTH8QUus0onZp2bl8Q3r8rrmSevygkGqIbe/<span class="hljs-number">16</span></code></pre><p>所以<strong>密码认证时的关键</strong>是 需要使用相同的算法+盐值来对待校验的明文进行加密，然后比较这两个密文来进行验证。</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring Boot</tag>
      
      <tag>BCrypt 加密</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker搭建Redis集群</title>
    <link href="/2020/11/30/Docker%E6%90%AD%E5%BB%BARedis%E9%9B%86%E7%BE%A4/"/>
    <url>/2020/11/30/Docker%E6%90%AD%E5%BB%BARedis%E9%9B%86%E7%BE%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker搭建Redis集群"><a href="#Docker搭建Redis集群" class="headerlink" title="Docker搭建Redis集群"></a>Docker搭建Redis集群</h1><p>本篇博客主要参考了<a href="https://segmentfault.com/a/1190000021882802">这篇文章</a>，也有一些小变动，记录一下方便自己之后需要。</p><h2 id="编辑配置"><a href="#编辑配置" class="headerlink" title="编辑配置"></a>编辑配置</h2><h3 id="配置模板"><a href="#配置模板" class="headerlink" title="配置模板"></a>配置模板</h3><p> <code>redis-cluster.tmpl</code></p><pre><code class="hljs properties"><span class="hljs-comment"># redis端口</span><span class="hljs-attr">port</span> <span class="hljs-string">$&#123;PORT&#125;</span><span class="hljs-comment"># 关闭保护模式</span><span class="hljs-meta">protected-mode</span> <span class="hljs-string">no</span><span class="hljs-comment"># 开启集群</span><span class="hljs-meta">cluster-enabled</span> <span class="hljs-string">yes</span><span class="hljs-comment"># 集群节点配置</span><span class="hljs-meta">cluster-config-file</span> <span class="hljs-string">nodes.conf</span><span class="hljs-comment"># 超时</span><span class="hljs-meta">cluster-node-timeout</span> <span class="hljs-string">5000</span><span class="hljs-comment"># 集群节点IP host模式为宿主机IP</span><span class="hljs-meta">cluster-announce-ip</span> <span class="hljs-string">192.xxx</span><span class="hljs-comment"># 集群节点端口 7001 - 7006</span><span class="hljs-meta">cluster-announce-port</span> <span class="hljs-string">$&#123;PORT&#125;</span><span class="hljs-meta">cluster-announce-bus-port</span> <span class="hljs-string">1$&#123;PORT&#125;</span><span class="hljs-comment"># 开启 appendonly 备份模式</span><span class="hljs-attr">appendonly</span> <span class="hljs-string">yes</span><span class="hljs-comment"># 每秒钟备份</span><span class="hljs-attr">appendfsync</span> <span class="hljs-string">everysec</span><span class="hljs-comment"># 对aof文件进行压缩时，是否执行同步操作</span><span class="hljs-meta">no-appendfsync-on-rewrite</span> <span class="hljs-string">no</span><span class="hljs-comment"># 当目前aof文件大小超过上一次重写时的aof文件大小的100%时会再次进行重写</span><span class="hljs-meta">auto-aof-rewrite-percentage</span> <span class="hljs-string">100</span><span class="hljs-comment"># 重写前AOF文件的大小最小值 默认 64mb</span><span class="hljs-meta">auto-aof-rewrite-min-size</span> <span class="hljs-string">64mb</span></code></pre><h3 id="生成配置脚本-redis-cluster-config-sh"><a href="#生成配置脚本-redis-cluster-config-sh" class="headerlink" title="生成配置脚本 redis-cluster-config.sh"></a>生成配置脚本 <code>redis-cluster-config.sh</code></h3><pre><code class="hljs sh"><span class="hljs-keyword">for</span> port <span class="hljs-keyword">in</span> `seq 7001 7006`; <span class="hljs-keyword">do</span> \  mkdir -p ./redis-cluster/<span class="hljs-variable">$&#123;port&#125;</span>/conf \  &amp;&amp; PORT=<span class="hljs-variable">$&#123;port&#125;</span> envsubst &lt; ./redis-cluster.tmpl &gt; ./redis-cluster/<span class="hljs-variable">$&#123;port&#125;</span>/conf/redis.conf \  &amp;&amp; mkdir -p ./redis-cluster/<span class="hljs-variable">$&#123;port&#125;</span>/data; \<span class="hljs-keyword">done</span></code></pre><h3 id="利用脚本批量生成配置"><a href="#利用脚本批量生成配置" class="headerlink" title="利用脚本批量生成配置"></a>利用脚本批量生成配置</h3><pre><code class="hljs bash">[hzh@localhost redis]$ chmod +x redis-cluster-config.sh[hzh@localhost redis]$ ./redis-cluster-config.sh</code></pre><pre><code class="hljs bash">[hzh@localhost redis]$ tree.├── redis-cluster│   ├── 7001│   │   ├── conf│   │   │   └── redis.conf│   │   └── data│   ├── 7002│   │   ├── conf│   │   │   └── redis.conf│   │   └── data│   ├── 7003│   │   ├── conf│   │   │   └── redis.conf│   │   └── data│   ├── 7004│   │   ├── conf│   │   │   └── redis.conf│   │   └── data│   ├── 7005│   │   ├── conf│   │   │   └── redis.conf│   │   └── data│   └── 7006│       ├── conf│       │   └── redis.conf│       └── data├── redis-cluster-config.sh</code></pre><h2 id="生成容器"><a href="#生成容器" class="headerlink" title="生成容器"></a>生成容器</h2><p>docker-compose 配置批量</p><p><code>docker-compose-redis-cluster.yml</code></p><pre><code class="hljs yml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3.7&#x27;</span><span class="hljs-attr">services:</span>  <span class="hljs-attr">redis7001:</span>    <span class="hljs-attr">image:</span> <span class="hljs-string">&#x27;redis&#x27;</span>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">redis7001</span>    <span class="hljs-attr">command:</span>      [<span class="hljs-string">&quot;redis-server&quot;</span>, <span class="hljs-string">&quot;/usr/local/etc/redis/redis.conf&quot;</span>]    <span class="hljs-attr">volumes:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">./redis-cluster/7001/conf/redis.conf:/usr/local/etc/redis/redis.conf</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">./redis-cluster/7001/data:/data</span>    <span class="hljs-attr">ports:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;7001:7001&quot;</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;17001:17001&quot;</span>    <span class="hljs-attr">environment:</span>      <span class="hljs-comment"># 设置时区为上海，否则时间会有问题</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">TZ=Asia/Shanghai</span>  <span class="hljs-attr">redis7002:</span>    <span class="hljs-attr">image:</span> <span class="hljs-string">&#x27;redis&#x27;</span>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">redis7002</span>    <span class="hljs-attr">command:</span>      [<span class="hljs-string">&quot;redis-server&quot;</span>, <span class="hljs-string">&quot;/usr/local/etc/redis/redis.conf&quot;</span>]    <span class="hljs-attr">volumes:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">./redis-cluster/7002/conf/redis.conf:/usr/local/etc/redis/redis.conf</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">./redis-cluster/7002/data:/data</span>    <span class="hljs-attr">ports:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;7002:7002&quot;</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;17002:17002&quot;</span>    <span class="hljs-attr">environment:</span>      <span class="hljs-comment"># 设置时区为上海，否则时间会有问题</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">TZ=Asia/Shanghai</span>  <span class="hljs-attr">redis7003:</span>    <span class="hljs-attr">image:</span> <span class="hljs-string">&#x27;redis&#x27;</span>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">redis7003</span>    <span class="hljs-attr">command:</span>      [<span class="hljs-string">&quot;redis-server&quot;</span>, <span class="hljs-string">&quot;/usr/local/etc/redis/redis.conf&quot;</span>]    <span class="hljs-attr">volumes:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">./redis-cluster/7003/conf/redis.conf:/usr/local/etc/redis/redis.conf</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">./redis-cluster/7003/data:/data</span>    <span class="hljs-attr">ports:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;7003:7003&quot;</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;17003:17003&quot;</span>    <span class="hljs-attr">environment:</span>      <span class="hljs-comment"># 设置时区为上海，否则时间会有问题</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">TZ=Asia/Shanghai</span>  <span class="hljs-attr">redis7004:</span>    <span class="hljs-attr">image:</span> <span class="hljs-string">&#x27;redis&#x27;</span>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">redis7004</span>    <span class="hljs-attr">command:</span>      [<span class="hljs-string">&quot;redis-server&quot;</span>, <span class="hljs-string">&quot;/usr/local/etc/redis/redis.conf&quot;</span>]    <span class="hljs-attr">volumes:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">./redis-cluster/7004/conf/redis.conf:/usr/local/etc/redis/redis.conf</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">./redis-cluster/7004/data:/data</span>    <span class="hljs-attr">ports:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;7004:7004&quot;</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;17004:17004&quot;</span>    <span class="hljs-attr">environment:</span>      <span class="hljs-comment"># 设置时区为上海，否则时间会有问题</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">TZ=Asia/Shanghai</span>  <span class="hljs-attr">redis7005:</span>    <span class="hljs-attr">image:</span> <span class="hljs-string">&#x27;redis&#x27;</span>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">redis7005</span>    <span class="hljs-attr">command:</span>      [<span class="hljs-string">&quot;redis-server&quot;</span>, <span class="hljs-string">&quot;/usr/local/etc/redis/redis.conf&quot;</span>]    <span class="hljs-attr">volumes:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">./redis-cluster/7005/conf/redis.conf:/usr/local/etc/redis/redis.conf</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">./redis-cluster/7005/data:/data</span>    <span class="hljs-attr">ports:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;7005:7005&quot;</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;17005:17005&quot;</span>    <span class="hljs-attr">environment:</span>      <span class="hljs-comment"># 设置时区为上海，否则时间会有问题</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">TZ=Asia/Shanghai</span>  <span class="hljs-attr">redis7006:</span>    <span class="hljs-attr">image:</span> <span class="hljs-string">&#x27;redis&#x27;</span>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">redis7006</span>    <span class="hljs-attr">command:</span>      [<span class="hljs-string">&quot;redis-server&quot;</span>, <span class="hljs-string">&quot;/usr/local/etc/redis/redis.conf&quot;</span>]    <span class="hljs-attr">volumes:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">./redis-cluster/7006/conf/redis.conf:/usr/local/etc/redis/redis.conf</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">./redis-cluster/7006/data:/data</span>    <span class="hljs-attr">ports:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;7006:7006&quot;</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;17006:17006&quot;</span>    <span class="hljs-attr">environment:</span>      <span class="hljs-comment"># 设置时区为上海，否则时间会有问题</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">TZ=Asia/Shanghai</span></code></pre><h3 id="执行生成命令"><a href="#执行生成命令" class="headerlink" title="执行生成命令"></a>执行生成命令</h3><pre><code class="hljs bash">[hzh@localhost redis]$ docker-compose -f docker-compose-redis-cluster.yml up -dbash: docker-compose: <span class="hljs-built_in">command</span> not found...[hzh@localhost redis]$ pip3 install --user docker-compose  <span class="hljs-comment"># 安装docker-compose</span></code></pre><p>再次执行</p><pre><code class="hljs bash">[hzh@localhost redis]$ docker-compose -f docker-compose-redis-cluster.yml up -dCreating network <span class="hljs-string">&quot;redis_default&quot;</span> with the default driverCreating redis7003 ... <span class="hljs-keyword">done</span>Creating redis7001 ... <span class="hljs-keyword">done</span>Creating redis7004 ... <span class="hljs-keyword">done</span>Creating redis7002 ... <span class="hljs-keyword">done</span>Creating redis7006 ... <span class="hljs-keyword">done</span>Creating redis7005 ... <span class="hljs-keyword">done</span>[hzh@localhost redis]$ docker psCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                                              NAMES8cab1789f565        redis               <span class="hljs-string">&quot;docker-entrypoint.s…&quot;</span>   24 seconds ago      Up 23 seconds       0.0.0.0:7005-&gt;7005/tcp, 6379/tcp, 0.0.0.0:17005-&gt;17005/tcp   redis70051743591a742f        redis               <span class="hljs-string">&quot;docker-entrypoint.s…&quot;</span>   24 seconds ago      Up 23 seconds       0.0.0.0:7006-&gt;7006/tcp, 6379/tcp, 0.0.0.0:17006-&gt;17006/tcp   redis7006dd5c4405833f        redis               <span class="hljs-string">&quot;docker-entrypoint.s…&quot;</span>   24 seconds ago      Up 23 seconds       0.0.0.0:7003-&gt;7003/tcp, 6379/tcp, 0.0.0.0:17003-&gt;17003/tcp   redis7003f3d813dfbfdd        redis               <span class="hljs-string">&quot;docker-entrypoint.s…&quot;</span>   24 seconds ago      Up 23 seconds       0.0.0.0:7001-&gt;7001/tcp, 6379/tcp, 0.0.0.0:17001-&gt;17001/tcp   redis7001269f81bfcd6b        redis               <span class="hljs-string">&quot;docker-entrypoint.s…&quot;</span>   24 seconds ago      Up 23 seconds       0.0.0.0:7002-&gt;7002/tcp, 6379/tcp, 0.0.0.0:17002-&gt;17002/tcp   redis70029b978437186d        redis               <span class="hljs-string">&quot;docker-entrypoint.s…&quot;</span>   24 seconds ago      Up 23 seconds       0.0.0.0:7004-&gt;7004/tcp, 6379/tcp, 0.0.0.0:17004-&gt;17004/tcp   redis7004</code></pre><h2 id="开启集群"><a href="#开启集群" class="headerlink" title="开启集群"></a>开启集群</h2><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it redis7001 redis-cli -p 7001 --cluster create 59.78.194.153:7001 59.78.194.153:7002 59.78.194.153:7003 59.78.194.153:7004 59.78.194.153:7005 59.78.194.153:7006 --cluster-replicas 1</code></pre><p>可能会报错，这里是因为端口没有开放。记得不仅要开放7001-7006端口，还需要开放17001-17006端口，不然开启集群时会卡在Waiting for the cluster to join 。因为1700X端口是集群通信端口。</p><pre><code class="hljs bash">[hzh@localhost redis]$ suPassword:(base) [root@localhost redis]<span class="hljs-comment"># firewall-cmd --zone=public --add-port=7001/tcp --permanent</span>success......(base) [root@localhost redis]<span class="hljs-comment"># firewall-cmd --zone=public --add-port=7006/tcp --permanent</span>success......(base) [root@localhost redis]<span class="hljs-comment"># firewall-cmd --zone=public --add-port=17006/tcp --permanent</span>success(base) [root@localhost redis]<span class="hljs-comment"># firewall-cmd --reload</span>success</code></pre><p>再次执行</p><pre><code class="hljs bash">[hzh@localhost redis]$ docker <span class="hljs-built_in">exec</span> -it redis7001 redis-cli -p 7001 --cluster create 59.78.194.153:7001 59.78.194.153:7002 59.78.194.153:7003 59.78.194.153:7004 59.78.194.153:7005 59.78.194.153:7006 --cluster-replicas 1&gt;&gt;&gt; Performing <span class="hljs-built_in">hash</span> slots allocation on 6 nodes...Master[0] -&gt; Slots 0 - 5460Master[1] -&gt; Slots 5461 - 10922Master[2] -&gt; Slots 10923 - 16383Adding replica 59.78.194.153:7005 to 59.78.194.153:7001Adding replica 59.78.194.153:7006 to 59.78.194.153:7002Adding replica 59.78.194.153:7004 to 59.78.194.153:7003&gt;&gt;&gt; Trying to optimize slaves allocation <span class="hljs-keyword">for</span> anti-affinity[WARNING] Some slaves are <span class="hljs-keyword">in</span> the same host as their masterM: e2cd40d097ea688af18cd022883fa13a8afd5ef3 59.78.194.153:7001   slots:[0-5460] (5461 slots) masterM: a698698fbe9ce85e7448bcb27ba5f19f0d175207 59.78.194.153:7002   slots:[5461-10922] (5462 slots) masterM: 51f55fa1094c0eed9a2ff8121a4923e9a86ff0d4 59.78.194.153:7003   slots:[10923-16383] (5461 slots) masterS: 14f8fbba8b2e9623865dd9453f22b63bd914ef13 59.78.194.153:7004   replicates a698698fbe9ce85e7448bcb27ba5f19f0d175207S: 003c2b6cad73550648f93ba3257abcf085b347e0 59.78.194.153:7005   replicates 51f55fa1094c0eed9a2ff8121a4923e9a86ff0d4S: 112ce7ce41c2930f6ce8507ffe3880e36e319cac 59.78.194.153:7006   replicates e2cd40d097ea688af18cd022883fa13a8afd5ef3Can I <span class="hljs-built_in">set</span> the above configuration? (<span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;yes&#x27;</span> to accept): yes&gt;&gt;&gt; Nodes configuration updated&gt;&gt;&gt; Assign a different config epoch to each node&gt;&gt;&gt; Sending CLUSTER MEET messages to join the clusterWaiting <span class="hljs-keyword">for</span> the cluster to join.&gt;&gt;&gt; Performing Cluster Check (using node 59.78.194.153:7001)M: e2cd40d097ea688af18cd022883fa13a8afd5ef3 59.78.194.153:7001   slots:[0-5460] (5461 slots) master   1 additional replica(s)M: a698698fbe9ce85e7448bcb27ba5f19f0d175207 59.78.194.153:7002   slots:[5461-10922] (5462 slots) master   1 additional replica(s)S: 14f8fbba8b2e9623865dd9453f22b63bd914ef13 59.78.194.153:7004   slots: (0 slots) slave   replicates a698698fbe9ce85e7448bcb27ba5f19f0d175207S: 112ce7ce41c2930f6ce8507ffe3880e36e319cac 59.78.194.153:7006   slots: (0 slots) slave   replicates e2cd40d097ea688af18cd022883fa13a8afd5ef3S: 003c2b6cad73550648f93ba3257abcf085b347e0 59.78.194.153:7005   slots: (0 slots) slave   replicates 51f55fa1094c0eed9a2ff8121a4923e9a86ff0d4M: 51f55fa1094c0eed9a2ff8121a4923e9a86ff0d4 59.78.194.153:7003   slots:[10923-16383] (5461 slots) master   1 additional replica(s)[OK] All nodes agree about slots configuration.&gt;&gt;&gt; Check <span class="hljs-keyword">for</span> open slots...&gt;&gt;&gt; Check slots coverage...[OK] All 16384 slots covered.</code></pre><h2 id="简单测试"><a href="#简单测试" class="headerlink" title="简单测试"></a>简单测试</h2><pre><code class="hljs bash">&gt; 59.78.194.153@7001 connected!&gt; <span class="hljs-built_in">set</span> name adminOK&gt; get nameadmin</code></pre><pre><code class="hljs bash">&gt; 59.78.194.153@7002 connected!&gt; get nameadmin</code></pre><p>查看集群状态</p><pre><code class="hljs bash">&gt; 59.78.194.153@7001 connected!&gt; cluster nodese2cd40d097ea688af18cd022883fa13a8afd5ef3 59.78.194.153:7001@17001 master - 0 1606736718359 1 connected 0-546014f8fbba8b2e9623865dd9453f22b63bd914ef13 59.78.194.153:7004@17004 slave a698698fbe9ce85e7448bcb27ba5f19f0d175207 0 1606736718000 2 connected003c2b6cad73550648f93ba3257abcf085b347e0 59.78.194.153:7005@17005 slave 51f55fa1094c0eed9a2ff8121a4923e9a86ff0d4 0 1606736718560 3 connected112ce7ce41c2930f6ce8507ffe3880e36e319cac 59.78.194.153:7006@17006 slave e2cd40d097ea688af18cd022883fa13a8afd5ef3 0 1606736716854 1 connecteda698698fbe9ce85e7448bcb27ba5f19f0d175207 59.78.194.153:7002@17002 myself,master - 0 1606736717000 2 connected 5461-1092251f55fa1094c0eed9a2ff8121a4923e9a86ff0d4 59.78.194.153:7003@17003 master - 0 1606736718560 3 connected 10923-16383</code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://segmentfault.com/a/1190000021882802">https://segmentfault.com/a/1190000021882802</a></p><p><a href="https://blog.csdn.net/XIANZHIXIANZHIXIAN/article/details/82392172">https://blog.csdn.net/XIANZHIXIANZHIXIAN/article/details/82392172</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>Redis集群</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker里安装使用Redis</title>
    <link href="/2020/11/30/Docker%E9%87%8C%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8Redis/"/>
    <url>/2020/11/30/Docker%E9%87%8C%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8Redis/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker里安装使用Redis"><a href="#Docker里安装使用Redis" class="headerlink" title="Docker里安装使用Redis"></a>Docker里安装使用Redis</h1><h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><p>Docker安装教程：<a href="https://docs.docker.com/engine/install/centos/">https://docs.docker.com/engine/install/centos/</a></p><h2 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h2><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><pre><code class="hljs bash">docker pull redis</code></pre><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><pre><code class="hljs bash">docker run --name redis -p 6378:6379 -d --restart=always redis redis-server --appendonly yes --requirepass <span class="hljs-string">&quot;123456&quot;</span></code></pre><p>参数讲解：</p><p><code>--name</code>：为容器取一个唯一的名字</p><p><code>-p</code>：端口映射，把宿主机的端口映射到容器内的端口</p><p><code>--restar=always</code>：随容器启动而启动</p><p><code>redis-server --appendonly yes</code>：在容器里执行<code>redis-server</code>命令，打开redis持久化</p><p><code>--requirepass</code>：密码</p><h3 id="连接测试"><a href="#连接测试" class="headerlink" title="连接测试"></a>连接测试</h3><h4 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h4><pre><code class="hljs bash">docker ps 查看CONTAINER IDdocker <span class="hljs-built_in">exec</span> -it xxxxxx redis-cli</code></pre><pre><code class="hljs bash">[hzh@localhost ~]$ docker <span class="hljs-built_in">exec</span> -it 8d4ad21aad45 redis-cli127.0.0.1:6379&gt; info  <span class="hljs-comment"># 容器有配置密码，需要先验证密码</span>NOAUTH Authentication required.127.0.0.1:6379&gt; auth 123456OK127.0.0.1:6379&gt; info<span class="hljs-comment"># Server</span>redis_version:6.0.9redis_git_sha1:00000000redis_git_dirty:0redis_build_id:12c354e6793cb936redis_mode:standaloneos:Linux 3.10.0-1127.el7.x86_64 x86_64arch_bits:64multiplexing_api:epollatomicvar_api:atomic-builtingcc_version:8.3.0process_id:1run_id:f7bf38ea25790793e78b2d3f11f3a974e15b1831tcp_port:6379uptime_in_seconds:72uptime_in_days:0hz:10configured_hz:10lru_clock:12893617executable:/data/redis-serverconfig_file:io_threads_active:0<span class="hljs-comment"># Clients</span>connected_clients:1client_recent_max_input_buffer:8client_recent_max_output_buffer:0blocked_clients:0tracking_clients:0clients_in_timeout_table:0<span class="hljs-comment"># Memory</span>used_memory:866768used_memory_human:846.45Kused_memory_rss:4739072used_memory_rss_human:4.52Mused_memory_peak:866768used_memory_peak_human:846.45Kused_memory_peak_perc:100.17%used_memory_overhead:823808used_memory_startup:803296used_memory_dataset:42960used_memory_dataset_perc:67.68%allocator_allocated:1012880allocator_active:1187840allocator_resident:4345856total_system_memory:67212570624total_system_memory_human:62.60Gused_memory_lua:37888used_memory_lua_human:37.00Kused_memory_scripts:0used_memory_scripts_human:0Bnumber_of_cached_scripts:0maxmemory:0maxmemory_human:0Bmaxmemory_policy:noevictionallocator_frag_ratio:1.17allocator_frag_bytes:174960allocator_rss_ratio:3.66allocator_rss_bytes:3158016rss_overhead_ratio:1.09rss_overhead_bytes:393216mem_fragmentation_ratio:5.75mem_fragmentation_bytes:3914808mem_not_counted_for_evict:0mem_replication_backlog:0mem_clients_slaves:0mem_clients_normal:20504mem_aof_buffer:8mem_allocator:jemalloc-5.1.0active_defrag_running:0lazyfree_pending_objects:0<span class="hljs-comment"># Persistence</span>loading:0rdb_changes_since_last_save:0rdb_bgsave_in_progress:0rdb_last_save_time:1606729065rdb_last_bgsave_status:okrdb_last_bgsave_time_sec:-1rdb_current_bgsave_time_sec:-1rdb_last_cow_size:0aof_enabled:1aof_rewrite_in_progress:0aof_rewrite_scheduled:0aof_last_rewrite_time_sec:-1aof_current_rewrite_time_sec:-1aof_last_bgrewrite_status:okaof_last_write_status:okaof_last_cow_size:0module_fork_in_progress:0module_fork_last_cow_size:0aof_current_size:0aof_base_size:0aof_pending_rewrite:0aof_buffer_length:0aof_rewrite_buffer_length:0aof_pending_bio_fsync:0aof_delayed_fsync:0<span class="hljs-comment"># Stats</span>total_connections_received:1total_commands_processed:1instantaneous_ops_per_sec:0total_net_input_bytes:71total_net_output_bytes:73instantaneous_input_kbps:0.00instantaneous_output_kbps:0.00rejected_connections:0sync_full:0sync_partial_ok:0sync_partial_err:0expired_keys:0expired_stale_perc:0.00expired_time_cap_reached_count:0expire_cycle_cpu_milliseconds:0evicted_keys:0keyspace_hits:0keyspace_misses:0pubsub_channels:0pubsub_patterns:0latest_fork_usec:0migrate_cached_sockets:0slave_expires_tracked_keys:0active_defrag_hits:0active_defrag_misses:0active_defrag_key_hits:0active_defrag_key_misses:0tracking_total_keys:0tracking_total_items:0tracking_total_prefixes:0unexpected_error_replies:0total_reads_processed:4total_writes_processed:3io_threaded_reads_processed:0io_threaded_writes_processed:0<span class="hljs-comment"># Replication</span>role:masterconnected_slaves:0master_replid:6c2b5360f8dd852be50507c77520da867ce290bdmaster_replid2:0000000000000000000000000000000000000000master_repl_offset:0second_repl_offset:-1repl_backlog_active:0repl_backlog_size:1048576repl_backlog_first_byte_offset:0repl_backlog_histlen:0<span class="hljs-comment"># CPU</span>used_cpu_sys:0.039076used_cpu_user:0.045342used_cpu_sys_children:0.004256used_cpu_user_children:0.000000<span class="hljs-comment"># Modules</span><span class="hljs-comment"># Cluster</span>cluster_enabled:0<span class="hljs-comment"># Keyspace</span></code></pre><h4 id="使用客户端"><a href="#使用客户端" class="headerlink" title="使用客户端"></a>使用客户端</h4><p><img src="/2020/11/30/Docker%E9%87%8C%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8Redis/image-20201130095357141.png" alt="image-20201130095357141"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.jianshu.com/p/63422ff9ed0a">https://www.jianshu.com/p/63422ff9ed0a</a></p><p><a href="https://hub.docker.com/r/centos/redis">https://hub.docker.com/r/centos/redis</a></p><h2 id="推荐客户端工具"><a href="#推荐客户端工具" class="headerlink" title="推荐客户端工具"></a>推荐客户端工具</h2><p><a href="https://github.com/qishibo/AnotherRedisDesktopManager/releases">https://github.com/qishibo/AnotherRedisDesktopManager/releases</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker里安装使用Mysql</title>
    <link href="/2020/11/29/Docker%E9%87%8C%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8Mysql/"/>
    <url>/2020/11/29/Docker%E9%87%8C%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8Mysql/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker里安装使用Mysql"><a href="#Docker里安装使用Mysql" class="headerlink" title="Docker里安装使用Mysql"></a>Docker里安装使用Mysql</h1><h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><p>Docker安装教程：<a href="https://docs.docker.com/engine/install/centos/">https://docs.docker.com/engine/install/centos/</a></p><h2 id="安装Mysql"><a href="#安装Mysql" class="headerlink" title="安装Mysql"></a>安装Mysql</h2><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><p>这里用了mysql:5.7</p><pre><code class="hljs bash">[hzh@localhost ~]$ docker pull mysql:5.75.7: Pulling from library/mysql852e50cd189d: Pull complete29969ddb0ffb: Pull completea43f41a44c48: Pull complete5cdd802543a3: Pull completeb79b040de953: Pull complete938c64119969: Pull complete7689ec51a0d9: Pull complete36bd6224d58f: Pull completecab9d3fa4c8c: Pull complete1b741e1c47de: Pull completeaac9d11987ac: Pull completeDigest: sha256:8e2004f9fe43df06c3030090f593021a5f283d028b5ed5765cc24236c2c4d88eStatus: Downloaded newer image <span class="hljs-keyword">for</span> mysql:5.7docker.io/library/mysql:5.7</code></pre><h3 id="查看本地镜像"><a href="#查看本地镜像" class="headerlink" title="查看本地镜像"></a>查看本地镜像</h3><pre><code class="hljs bash">[hzh@localhost ~]$ docker imagesREPOSITORY          TAG                 IMAGE ID            CREATED             SIZEmysql               5.7                 ae0658fdbad5        8 days ago          449MBhello-world         latest              bf756fb1ae65        11 months ago       13.3kB</code></pre><h3 id="创建所需目录和配置"><a href="#创建所需目录和配置" class="headerlink" title="创建所需目录和配置"></a>创建所需目录和配置</h3><h4 id="用以挂载外部配置文件和数据目录："><a href="#用以挂载外部配置文件和数据目录：" class="headerlink" title="用以挂载外部配置文件和数据目录："></a>用以挂载外部配置文件和数据目录：</h4><pre><code class="hljs bash">mkdir datamkdir data/mysql3306mkdir data/mysql3306/conf.dmkdir data/mysql3306/data/==========================[hzh@localhost mysql]$ <span class="hljs-built_in">pwd</span>/home/hzh/mysql[hzh@localhost mysql]$ tree.└── data    └── mysql3306        ├── conf.d        └── data4 directories, 0 files</code></pre><h4 id="编辑配置"><a href="#编辑配置" class="headerlink" title="编辑配置"></a>编辑配置</h4><pre><code class="hljs bash">[hzh@localhost mysql]$ cat data/mysql3306/my.cnf<span class="hljs-comment"># vim ~/mysql/data/mysql3306/my.cnf</span>[client]port= 3306socket  = /tmp/mysql.sock<span class="hljs-comment">#default-character-set = utf8mb4</span><span class="hljs-comment">## The MySQL server</span>[mysqld]port = 3306socket  = /tmp/mysql.sockuser = mysqlskip-external-lockingskip-name-resolve<span class="hljs-comment">#skip-grant-tables</span><span class="hljs-comment">#skip-networking</span><span class="hljs-comment">###################################### dir</span><span class="hljs-comment">#basedir=/usr/local/mysql</span>datadir=/var/lib/mysqltmpdir=/var/lib/mysqlsecure_file_priv=/var/lib/mysql<span class="hljs-comment">###################################### some app</span>log-error=mysql.errpid-file=/var/lib/mysql/mysql.pidlocal-infile=1event_scheduler=0federateddefault-storage-engine=InnoDB<span class="hljs-comment">#default-time-zone= &#x27;+8:00&#x27;</span>log_timestamps=SYSTEMcharacter-set-client-handshake = FALSEcharacter-set-server = utf8mb4collation-server = utf8mb4_unicode_ciinit_connect=<span class="hljs-string">&#x27;SET NAMES utf8mb4&#x27;</span><span class="hljs-comment">#5.6</span>explicit_defaults_for_timestamp=<span class="hljs-literal">true</span><span class="hljs-comment">#fulltext</span>innodb_optimize_fulltext_onlyft_min_word_len=1<span class="hljs-comment">#ft_max_word_len</span>innodb_ft_min_token_size=1<span class="hljs-comment">###################################### memory allocate and myisam configure</span>max_connections=3000<span class="hljs-comment">#back_log=200</span>max_connect_errors=10000key_buffer_size = 16Mmax_allowed_packet = 16Mtable_open_cache = 10240sort_buffer_size = 2Mread_buffer_size = 2Mread_rnd_buffer_size = 2Mjoin_buffer_size=2Mmyisam_sort_buffer_size = 4M<span class="hljs-comment">#net_buffer_length = 2M</span>thread_cache_size = 24query_cache_type=1query_cache_size=256Mquery_cache_limit=32Mtmp_table_size=1Gmax_heap_table_size=1G<span class="hljs-comment">#thread_concurrency =48</span><span class="hljs-comment">###################################### replication</span>server-id = 19216810951log-bin=mysql-binbinlog_format=mixedmax_binlog_size=1G<span class="hljs-comment">#binlog_cache_size=512M</span>log_slave_updates=<span class="hljs-literal">true</span>log_bin_trust_function_creators=<span class="hljs-literal">true</span>expire_logs_days=15replicate-ignore-db=mysqlreplicate-ignore-db=<span class="hljs-built_in">test</span>replicate-ignore-db=information_schemareplicate-ignore-db=performance_schemareplicate-wild-ignore-table=mysql.%replicate-wild-ignore-table=<span class="hljs-built_in">test</span>.%replicate-wild-ignore-table=information_schema.%replicate-wild-ignore-table=performance_schema.%lower_case_table_names = 1<span class="hljs-comment">#read_only=1</span>master_info_repository=TABLErelay_log_info_repository=TABLE<span class="hljs-comment">###################################### slow-query</span>long_query_time=1slow_query_log=1slow_query_log_file=/var/lib/mysql/slow-query.loginteractive_timeout=600wait_timeout=600<span class="hljs-comment">#log_queries_not_using_indexes=1</span><span class="hljs-comment">###################################### innodb configure</span>innodb_file_per_table<span class="hljs-comment">#innodb_file_format=Barracuda</span><span class="hljs-comment">#innodb_io_capacity=200</span>innodb_data_home_dir = /var/lib/mysql<span class="hljs-comment">#innodb_data_file_path = ibdata1:2000M;ibdata2:10M:autoextend</span>innodb_log_group_home_dir = /var/lib/mysqlinnodb_buffer_pool_size =4G<span class="hljs-comment"># Set .._log_file_size to 25 % of buffer pool size</span>innodb_log_file_size = 1Ginnodb_log_files_in_group = 3innodb_log_buffer_size = 32M<span class="hljs-comment">#innodb_lock_wait_timeout = 50</span>innodb_flush_log_at_trx_commit = 1sync_binlog=0sql-mode=<span class="hljs-string">&quot;STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&quot;</span><span class="hljs-comment">##########################################</span>[mysqldump]quickmax_allowed_packet = 16M[mysql]no-auto-rehashdefault-character-set = utf8mb4prompt=\U \h \R:\m:\s \d&gt;[myisamchk]key_buffer_size = 20Msort_buffer_size = 20Mread_buffer = 2Mwrite_buffer = 2M[mysqlhotcopy]interactive-timeout</code></pre><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><pre><code class="hljs bash">docker run --restart=always --privileged=<span class="hljs-literal">true</span> -v /etc/localtime:/etc/localtime:ro -d -v /home/hzh/mysql/data/mysql3306/data/:/var/lib/mysql -v /home/hzh/mysql/data/mysql3306/conf.d:/etc/mysql/conf.d -v /home/hzh/mysql/data/mysql3306/my.cnf:/etc/mysql/my.cnf -p 3306:3306 --name mysql5.7 -e MYSQL_ROOT_PASSWORD=123456 mysql:5.7</code></pre><p>参数说明：<br>–restart=always： 当Docker 重启时，容器会自动启动。<br>–privileged=true：容器内的root拥有真正root权限，否则容器内root只是外部普通用户权限<br>-v /opt/mysql/conf.d/my.cnf:/etc/my.cnf：映射配置文件<br>-v /opt/mysql/data/:/var/lib/mysql：映射数据目录<br>-v /etc/localtime:/etc/localtime:ro：设置容器的时间与宿主机同步<br>-p 3306:3306：将容器的3306端口映射到主机的3306端口<br>-e MYSQL_ROOT_PASSWORD=123456：设置mysql的root密码</p><h3 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h3><pre><code class="hljs bash">[hzh@localhost mysql]$ docker psCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                     NAMESd5c69ef90e72        mysql:5.7           <span class="hljs-string">&quot;docker-entrypoint.s…&quot;</span>   23 seconds ago      Up 23 seconds       0.0.0.0:3306-&gt;3306/tcp, 33060/tcp   mysql5.7</code></pre><h3 id="登录Mysql"><a href="#登录Mysql" class="headerlink" title="登录Mysql"></a>登录Mysql</h3><p><img src="/2020/11/29/Docker%E9%87%8C%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8Mysql/image-20201129200709368.png" alt="image-20201129200709368"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.hellojava.com/a/86680.html">https://www.hellojava.com/a/86680.html</a> </p><p><a href="https://docs.docker.com/engine/install/centos/">https://docs.docker.com/engine/install/centos/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>Mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用Java发送电子邮件</title>
    <link href="/2020/11/23/%E7%94%A8Java%E5%8F%91%E9%80%81%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6/"/>
    <url>/2020/11/23/%E7%94%A8Java%E5%8F%91%E9%80%81%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>Project Structure -&gt; new Modules</p><p><img src="/2020/11/23/%E7%94%A8Java%E5%8F%91%E9%80%81%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6/image-20201122155533453.png" alt="image-20201122155533453"></p><h2 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h2><ul><li><h3 id="下载Jar包"><a href="#下载Jar包" class="headerlink" title="下载Jar包"></a>下载Jar包</h3><ul><li><p><a href="https://mvnrepository.com/artifact/javax.mail/mail">JavaMail API (compat)</a>  </p></li><li><p><a href="https://mvnrepository.com/artifact/javax.activation/activation">JavaBeans(TM) Activation Framework</a> </p></li></ul></li></ul><p>创建lib文件夹并把下载的包放进来</p><p><img src="/2020/11/23/%E7%94%A8Java%E5%8F%91%E9%80%81%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6/image-20201122160245862.png" alt="image-20201122160245862"></p><ul><li><h3 id="添加进标准库"><a href="#添加进标准库" class="headerlink" title="添加进标准库"></a>添加进标准库</h3></li></ul><p><img src="/2020/11/23/%E7%94%A8Java%E5%8F%91%E9%80%81%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6/image-20201122160343244.png" alt="image-20201122160343244"></p><h2 id="配置邮箱"><a href="#配置邮箱" class="headerlink" title="配置邮箱"></a>配置邮箱</h2><p><img src="/2020/11/23/%E7%94%A8Java%E5%8F%91%E9%80%81%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6/image-20201122161917032.png" alt="image-20201122161917032"></p><ul><li><p>开启POP3/SMTP服务</p></li><li><p>获取授权码</p></li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>以使用qq邮箱为例</p><p><img src="/2020/11/23/%E7%94%A8Java%E5%8F%91%E9%80%81%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6/image-20201122163946091.png" alt="image-20201122163946091"></p><blockquote><p><a href="https://www.bilibili.com/video/BV12J411M7Sj?p=41">https://www.bilibili.com/video/BV12J411M7Sj?p=41</a></p></blockquote><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.mail.util.MailSSLSocketFactory;<span class="hljs-keyword">import</span> javax.mail.*;<span class="hljs-keyword">import</span> javax.mail.internet.InternetAddress;<span class="hljs-keyword">import</span> javax.mail.internet.MimeMessage;<span class="hljs-keyword">import</span> java.security.GeneralSecurityException;<span class="hljs-keyword">import</span> java.util.Properties;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MailDemo</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> GeneralSecurityException, MessagingException </span>&#123;        <span class="hljs-comment">// 配置</span>        Properties prop = <span class="hljs-keyword">new</span> Properties();        prop.setProperty(<span class="hljs-string">&quot;mail.host&quot;</span>, <span class="hljs-string">&quot;smtp.qq.com&quot;</span>);        prop.setProperty(<span class="hljs-string">&quot;mail.transport.protocol&quot;</span>, <span class="hljs-string">&quot;smtp&quot;</span>);        prop.setProperty(<span class="hljs-string">&quot;mail.smtp.auth&quot;</span>, <span class="hljs-string">&quot;true&quot;</span>);        <span class="hljs-comment">// QQ邮箱，还需要设置SSL加密</span>        MailSSLSocketFactory sf = <span class="hljs-keyword">new</span> MailSSLSocketFactory();        sf.setTrustAllHosts(<span class="hljs-keyword">true</span>);        prop.put(<span class="hljs-string">&quot;mail.smtp.ssl.enable&quot;</span>, <span class="hljs-string">&quot;true&quot;</span>);        prop.put(<span class="hljs-string">&quot;mail.smtp.ssl.socketFactory&quot;</span>, sf);        <span class="hljs-comment">// 使用JavaMail发送邮件五个步骤：</span>        <span class="hljs-comment">// 1.创建定义整个应用程序所需的环境信息的Session对象</span>        <span class="hljs-comment">// QQ 才有，其他邮件不用</span>        Session session = Session.getDefaultInstance(prop, <span class="hljs-keyword">new</span> Authenticator() &#123;            <span class="hljs-meta">@Override</span>            <span class="hljs-function"><span class="hljs-keyword">protected</span> PasswordAuthentication <span class="hljs-title">getPasswordAuthentication</span><span class="hljs-params">()</span> </span>&#123;                <span class="hljs-comment">// 发件人用户名、授权码</span>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> PasswordAuthentication(<span class="hljs-string">&quot;邮箱&quot;</span>, <span class="hljs-string">&quot;授权码&quot;</span>);            &#125;        &#125;);        <span class="hljs-comment">// 开启Session的debug模式，这样可以查看程序发送邮件的运行状态</span>        session.setDebug(<span class="hljs-keyword">true</span>);        <span class="hljs-comment">// 2.通过session得到transport对象</span>        Transport ts = session.getTransport();        <span class="hljs-comment">// 3.使用邮箱的用户名和授权码脸上邮件服务器</span>        ts.connect(<span class="hljs-string">&quot;smtp.qq.com&quot;</span>, <span class="hljs-string">&quot;邮箱&quot;</span>, <span class="hljs-string">&quot;授权码&quot;</span>);        <span class="hljs-comment">// 4.创建邮件：写邮件</span>        MimeMessage message = <span class="hljs-keyword">new</span> MimeMessage(session);        <span class="hljs-comment">// 发件人</span>        message.setFrom(<span class="hljs-keyword">new</span> InternetAddress(<span class="hljs-string">&quot;邮箱&quot;</span>));        <span class="hljs-comment">// 收件人</span>        message.setRecipient(Message.RecipientType.TO, <span class="hljs-keyword">new</span> InternetAddress(<span class="hljs-string">&quot;xxx@163.com&quot;</span>));        <span class="hljs-comment">// 主题</span>        message.setSubject(<span class="hljs-string">&quot;Java邮件主题&quot;</span>);        <span class="hljs-comment">// 邮件内容</span>        <span class="hljs-comment">// 1）简单邮件，正文就文字</span>        <span class="hljs-comment">// message.setContent(&quot;你好，测试&quot;, &quot;text/html;charset=utf-8&quot;);</span>        <span class="hljs-comment">/*==========================================*/</span>        <span class="hljs-comment">// 2）可带有附件的邮件</span>        MimeBodyPart file = <span class="hljs-keyword">new</span> MimeBodyPart();        DataHandler dh = <span class="hljs-keyword">new</span> DataHandler(<span class="hljs-keyword">new</span> FileDataSource(<span class="hljs-string">&quot;D:\\Users\\iHao\\Documents\\Code\\hello-java\\JavaMail\\src\\notebook\\javaMail.md&quot;</span>));        file.setDataHandler(dh);        file.setFileName(<span class="hljs-string">&quot;javaMail.md&quot;</span>);  <span class="hljs-comment">// 下面可引用</span>        MimeBodyPart text = <span class="hljs-keyword">new</span> MimeBodyPart();        text.setContent(<span class="hljs-string">&quot;这里是邮件正文&quot;</span>, <span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);        MimeMultipart mm = <span class="hljs-keyword">new</span> MimeMultipart();        mm.addBodyPart(text);        mm.addBodyPart(file);        mm.setSubType(<span class="hljs-string">&quot;related&quot;</span>);  <span class="hljs-comment">// mixed, related</span>        message.setContent(mm);        message.saveChanges();        <span class="hljs-comment">// 5.发送邮件</span>        ts.sendMessage(message, message.getAllRecipients());        <span class="hljs-comment">// 6.关闭连接</span>        ts.close();    &#125;&#125;</code></pre><p>运行测试，成功~</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>邮件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>配置使用frp进行反向代理</title>
    <link href="/2020/11/21/%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8frp%E8%BF%9B%E8%A1%8C%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    <url>/2020/11/21/%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8frp%E8%BF%9B%E8%A1%8C%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>新建一个frp目录放下载文件，<a href="https://github.com/fatedier/frp/releases">下载地址</a></p><p><img src="/2020/11/21/%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8frp%E8%BF%9B%E8%A1%8C%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/image-20201121155627775.png" alt="image-20201121155627775"></p><p>我这里是x86的Linux系统，所以下载了 frp_0.34.3_linux_386.tar.gz ，命令如下：</p><pre><code class="hljs bash">wget https://github.com/fatedier/frp/releases/download/v0.34.3/frp_0.34.3_linux_386.tar.gz</code></pre><p>服务端和客户端都需要下载并安装。这里的服务端指有公网ip的服务器，客户端指需要被代理的内网机器。</p><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><pre><code class="hljs bash">tar -zxvf  frp_*.tar.gz</code></pre><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>以 ssh 为例</p><h4 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h4><p><code>frps.ini</code></p><pre><code class="hljs ini"><span class="hljs-section">[common]</span><span class="hljs-attr">bind_port</span> = <span class="hljs-number">7000</span>           <span class="hljs-comment">#与客户端绑定的进行通信的端口</span><span class="hljs-comment"># auth token</span><span class="hljs-attr">token</span> = <span class="hljs-number">1234</span><span class="hljs-comment"># dashboard_addr = 0.0.0.0</span><span class="hljs-comment"># dashboard_port = 7500</span><span class="hljs-comment"># 仪表盘访问的用户名密码，如果不设置，则默认都是 admin</span><span class="hljs-comment"># dashboard_user = admin</span><span class="hljs-comment"># dashboard_pwd = admin</span></code></pre><h4 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h4><p><code>frpc.ini</code></p><pre><code class="hljs ini"><span class="hljs-section">[common]</span><span class="hljs-attr">server_addr</span> = <span class="hljs-number">120.56</span>.<span class="hljs-number">37.48</span>   <span class="hljs-comment">#公网服务器ip</span><span class="hljs-attr">server_port</span> = <span class="hljs-number">7000</span>            <span class="hljs-comment">#与服务端bind_port一致</span><span class="hljs-comment"># auth token</span><span class="hljs-attr">token</span> = abcd1234567890<span class="hljs-comment">#公网通过ssh访问内部服务器</span><span class="hljs-section">[ssh]</span><span class="hljs-attr">type</span> = tcp              <span class="hljs-comment">#连接协议</span><span class="hljs-attr">local_ip</span> = <span class="hljs-number">192.168</span>.<span class="hljs-number">1.48</span> <span class="hljs-comment">#内网服务器ip</span><span class="hljs-attr">local_port</span> = <span class="hljs-number">22</span>         <span class="hljs-comment">#ssh默认端口号</span><span class="hljs-attr">remote_port</span> = <span class="hljs-number">6000</span>      <span class="hljs-comment">#自定义的访问内部ssh端口号</span></code></pre><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><pre><code class="hljs bash"><span class="hljs-comment"># 服务端</span>nohup ./frps -c ./frps.ini &amp;<span class="hljs-comment"># 客户端 </span>nohup ./frpc -c ./frpc.ini &amp;</code></pre><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><pre><code class="hljs bash">ssh root@42.xxx -p 6000</code></pre><p>即可登录内网的机器，相当于使用了 <code>ssh root@192.168.1.48 -p 22</code></p><h3 id="配置开机自启"><a href="#配置开机自启" class="headerlink" title="配置开机自启"></a>配置开机自启</h3><p>设置 frps 服务开机自启动，方法参考如下。</p><p>创建后台启动服务文件：</p><pre><code class="hljs bash">vim /etc/systemd/system/frp.service</code></pre><p>内容：</p><pre><code class="hljs bash">[Unit]Description=fraps serviceAfter=network.target syslog.targetWants=network.target[Service]Type=simple <span class="hljs-comment"># 路径填成自己的(这几个中文记得删掉)</span>ExecStart=/root/frp_0.31.1_linux_amd64/frps -c /root/frp_0.31.1_linux_amd64/frps.ini [Install]WantedBy=multi-user.target</code></pre><p>命令：</p><pre><code class="hljs bash"><span class="hljs-comment"># 启动测试 .service 可省略</span>systemctl start frp.service<span class="hljs-comment"># 查看启动状态</span>systemctl status frp.service<span class="hljs-comment"># 开机自启</span>systemctl <span class="hljs-built_in">enable</span> frp.service<span class="hljs-comment"># 重启服务</span>systemctl restart frp.service</code></pre><h2 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h2><pre><code class="hljs ini"><span class="hljs-section">[common]</span><span class="hljs-attr">server_addr</span> = <span class="hljs-number">42</span>.xxx.xxx.xxx <span class="hljs-attr">server_port</span> = <span class="hljs-number">7000</span><span class="hljs-comment"># auth token</span><span class="hljs-attr">token</span> = abcd1234567890<span class="hljs-section">[web]</span><span class="hljs-attr">type</span> = tcp<span class="hljs-attr">local_ip</span> = <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-attr">local_port</span> = <span class="hljs-number">80</span><span class="hljs-attr">remote_port</span> = <span class="hljs-number">8080</span><span class="hljs-section">[ftp]</span><span class="hljs-attr">type</span> = tcp<span class="hljs-attr">local_ip</span> = <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-attr">local_port</span> = <span class="hljs-number">21</span><span class="hljs-attr">remote_port</span> = <span class="hljs-number">8082</span><span class="hljs-section">[ftp_port1]</span><span class="hljs-attr">type</span> = tcp<span class="hljs-attr">local_ip</span> = <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-attr">local_port</span> = <span class="hljs-number">5100</span><span class="hljs-attr">remote_port</span> = <span class="hljs-number">5100</span><span class="hljs-section">[ftp_port2]</span><span class="hljs-attr">type</span> = tcp<span class="hljs-attr">local_ip</span> = <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-attr">local_port</span> = <span class="hljs-number">5101</span><span class="hljs-attr">remote_port</span> = <span class="hljs-number">5101</span><span class="hljs-section">[ftp_port3]</span><span class="hljs-attr">type</span> = tcp<span class="hljs-attr">local_ip</span> = <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-attr">local_port</span> = <span class="hljs-number">5102</span><span class="hljs-attr">remote_port</span> = <span class="hljs-number">5102</span><span class="hljs-section">[rdp]</span><span class="hljs-attr">type</span> = tcp<span class="hljs-attr">local_ip</span> = <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-attr">local_port</span> = <span class="hljs-number">3389</span><span class="hljs-attr">remote_port</span> = <span class="hljs-number">3389</span><span class="hljs-section">[ssh]</span><span class="hljs-attr">type</span> = tcp<span class="hljs-attr">local_ip</span> = <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-attr">local_port</span> = <span class="hljs-number">22</span><span class="hljs-attr">remote_port</span> = <span class="hljs-number">2222</span><span class="hljs-attr">use_encryption</span> = <span class="hljs-literal">true</span><span class="hljs-attr">use_compression</span> = <span class="hljs-literal">false</span></code></pre><p>远程桌面配置参考， 客户端 <code>frpc.ini</code>：</p><pre><code class="hljs ini"><span class="hljs-section">[common]</span><span class="hljs-comment"># 服务器的 IP</span><span class="hljs-attr">server_addr</span> = <span class="hljs-number">42</span>.XXX<span class="hljs-comment"># 服务器上设置的服务绑定端口(frps.ini 中的 bind_port)</span><span class="hljs-attr">server_port</span> = <span class="hljs-number">7000</span> <span class="hljs-comment"># 安全授权 token，需与服务端设置一致</span><span class="hljs-attr">token</span> = <span class="hljs-number">12345678</span> <span class="hljs-section">[RDP]</span> <span class="hljs-comment"># 反向代理名称，可以随意设置</span><span class="hljs-comment"># RDP 是 TCP 协议的</span><span class="hljs-attr">type</span> = tcp<span class="hljs-comment"># 本机 IP</span><span class="hljs-attr">local_ip</span> = <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-comment"># 远程桌面的默认端口</span><span class="hljs-attr">local_port</span> = <span class="hljs-number">3389</span><span class="hljs-comment"># 外网访问的端口</span><span class="hljs-attr">remote_port</span> = <span class="hljs-number">7001</span><span class="hljs-comment"># 外网访问的域名，建议配置</span><span class="hljs-comment"># custom_domains = frp.lzw.me</span> <span class="hljs-comment"># 如果是linux，可设置 ssh。在控制端就可以用 server_addr:remote_port 作为 ssh 登陆地址</span><span class="hljs-comment"># [ssh]</span><span class="hljs-comment"># type = tcp</span><span class="hljs-comment"># local_ip = 127.0.0.1</span><span class="hljs-comment"># local_port = 22</span><span class="hljs-comment"># remote_port = 2222</span> <span class="hljs-comment"># 设置一个 http 服务 web</span><span class="hljs-comment"># [web]</span><span class="hljs-comment"># type = http</span><span class="hljs-comment"># local_port = 80</span><span class="hljs-comment"># custom_domains = frpweb.lzw.me</span> <span class="hljs-comment"># 设置一个代理服务。在控制端就可以用 server_addr:remote_port 作为代理地址</span><span class="hljs-comment"># [http_proxy]</span><span class="hljs-comment"># type = tcp</span><span class="hljs-comment"># remote_port = 6000</span><span class="hljs-comment"># plugin = http_proxy</span></code></pre><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li><a href="https://lzw.me/a/frp-windows-mstsc.html">使用 FRP 实现在家远程桌面到公司内网进行远程办公</a></li><li><a href="https://blog.csdn.net/u013144287/article/details/78589643">十分钟教你配置frp实现内网穿透</a></li><li><a href="https://canwdev.github.io/manual/setup-frp.html#%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF-%C2%B7-frps">安装 frp 内网穿透工具</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>frp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用GitHubAction自动部署Hexo</title>
    <link href="/2020/11/20/%E5%88%A9%E7%94%A8GitHubAction%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2Hexo/"/>
    <url>/2020/11/20/%E5%88%A9%E7%94%A8GitHubAction%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2Hexo/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前用GitHub Action 自动部署了Gitbook，现在尝试用相同的思路部署 Hexo。</p><p>了解了下现有自动部署Hexo的方式，大多为利用 hexo deploy 或者使用两个仓库，一个放源码一个放页面。</p><p>将源码和页面分开放的方式，发现一些博客里的介绍都比较复杂，需要配置ssh密钥，原因是在源码仓库的action里将编译的页面代码push到另一个仓库，需要以ssh的方式验证登陆。</p><p>正好之前利用 GitHub Action 部署过 Gitbook，想到其实完全可以用这个思路照搬过来，只使用一个仓库，利用两个不同的分支，一个用于放页面，一个放网页页面代码。</p><h2 id="开工"><a href="#开工" class="headerlink" title="开工"></a>开工</h2><p>配置流程与<a href="https://huzhenhao.top/2020/11/18/%E5%88%A9%E7%94%A8GitHubAction%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2Gitbook/">利用GitHubAction自动部署Gitbook</a>一致，<em>action.yml</em>内容根据具体Hexo安装及使用即可：</p><pre><code class="hljs yml"><span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;Hexo Action Build&#x27;</span><span class="hljs-attr">on:</span>    <span class="hljs-attr">push:</span>        <span class="hljs-attr">branches:</span>            <span class="hljs-bullet">-</span> <span class="hljs-string">master</span> <span class="hljs-comment"># trigger branch</span><span class="hljs-attr">jobs:</span>    <span class="hljs-attr">build:</span>        <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span>        <span class="hljs-attr">strategy:</span>            <span class="hljs-attr">matrix:</span>                <span class="hljs-attr">node-version:</span> [<span class="hljs-number">12</span>]        <span class="hljs-attr">steps:</span>            <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Use</span> <span class="hljs-string">Node.js</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">matrix.node-version</span> <span class="hljs-string">&#125;&#125;</span>              <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v1</span>              <span class="hljs-attr">with:</span>                  <span class="hljs-attr">node-version:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">matrix.node-version</span> <span class="hljs-string">&#125;&#125;</span>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">install_hexo</span>              <span class="hljs-attr">run:</span> <span class="hljs-string">|</span>                  <span class="hljs-string">npm</span> <span class="hljs-string">i</span> <span class="hljs-string">-g</span> <span class="hljs-string">hexo-cli</span> <span class="hljs-comment"># 安装hexo</span>                  <span class="hljs-string">npm</span> <span class="hljs-string">i</span>                  <span class="hljs-string">npm</span> <span class="hljs-string">install</span> <span class="hljs-string">https://github.com/CodeFalling/hexo-asset-image</span> <span class="hljs-comment"># 图片插件</span>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">generate_hexo</span>              <span class="hljs-attr">run:</span> <span class="hljs-string">|</span>                  <span class="hljs-string">hexo</span> <span class="hljs-string">g</span>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">push_to_pages</span>              <span class="hljs-attr">run:</span> <span class="hljs-string">|</span>                  <span class="hljs-string">cd</span> <span class="hljs-string">./public</span>                  <span class="hljs-string">git</span> <span class="hljs-string">init</span>                  <span class="hljs-string">git</span> <span class="hljs-string">config</span> <span class="hljs-string">--local</span> <span class="hljs-string">user.name</span> <span class="hljs-string">&quot;$&#123;GITHUB_ACTOR&#125;&quot;</span>                  <span class="hljs-string">git</span> <span class="hljs-string">config</span> <span class="hljs-string">--local</span> <span class="hljs-string">user.email</span> <span class="hljs-string">&quot;$&#123;GITHUB_ACTOR&#125;@users.noreply.github.com&quot;</span>                  <span class="hljs-string">git</span> <span class="hljs-string">add</span> <span class="hljs-string">*</span>                  <span class="hljs-string">git</span> <span class="hljs-string">commit</span> <span class="hljs-string">-m</span> <span class="hljs-string">&quot;Update by hexo-action&quot;</span>                  <span class="hljs-string">git</span> <span class="hljs-string">push</span> <span class="hljs-string">--force</span>  <span class="hljs-string">&quot;https://$&#123;GITHUB_ACTOR&#125;:$<span class="hljs-template-variable">&#123;&#123; secrets.PERSONAL_TOKEN &#125;&#125;</span>@github.com/$&#123;GITHUB_REPOSITORY&#125;.git&quot;</span> <span class="hljs-string">master:gh-pages</span></code></pre><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>在安装环境部分，有<code>npm install https://github.com/CodeFalling/hexo-asset-image # 图片插件</code>，这是因为后来在使用Typora写博客时，发现使用相对路径放置的图片在编译后不能被正确显示，找了一圈网上的解决方法，发现使用这个插件是比较优雅的方式。</p><p>GitHub上配置，若是使用 XXX.github.io 仓库，默认页面的分支是master，我这里在仓库的设置里进行了修改，用gh-pages分支展示网页，用master放源码。</p><p><img src="/2020/11/20/%E5%88%A9%E7%94%A8GitHubAction%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2Hexo/image-20201120220627930.png" alt="image-20201120220627930"></p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GitHub Action</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多个git仓库整合到一个仓库</title>
    <link href="/2020/11/20/%E5%A4%9A%E4%B8%AAgit%E4%BB%93%E5%BA%93%E6%95%B4%E5%90%88%E5%88%B0%E4%B8%80%E4%B8%AA%E4%BB%93%E5%BA%93/"/>
    <url>/2020/11/20/%E5%A4%9A%E4%B8%AAgit%E4%BB%93%E5%BA%93%E6%95%B4%E5%90%88%E5%88%B0%E4%B8%80%E4%B8%AA%E4%BB%93%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1 id="多个git仓库整合到一个仓库"><a href="#多个git仓库整合到一个仓库" class="headerlink" title="多个git仓库整合到一个仓库"></a>多个git仓库整合到一个仓库</h1><blockquote><p><a href="https://www.cnblogs.com/arnoldlu/p/11130600.html">https://www.cnblogs.com/arnoldlu/p/11130600.html</a>  </p></blockquote><h2 id="新建summary仓库"><a href="#新建summary仓库" class="headerlink" title="新建summary仓库"></a>新建summary仓库</h2><p>新建一个summary仓库，用于整合一系列git仓库。</p><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> &lt;http_url&gt;/summary.git<span class="hljs-built_in">cd</span> summarytouch README.mdgit add README.mdgit commit -m <span class="hljs-string">&quot;add README&quot;</span>git push -u origin master</code></pre><h2 id="将其它git仓库merge到summary中"><a href="#将其它git仓库merge到summary中" class="headerlink" title="将其它git仓库merge到summary中"></a>将其它git仓库merge到summary中</h2><pre><code class="hljs bash"><span class="hljs-comment"># 将memory.git作为别名alias_memory加入到当前仓库中</span>git remote add alias_memory &lt;http_url&gt;/memory.git<span class="hljs-comment"># 从alias_memory拉取数据到summary仓库</span>git fetch alias_memory<span class="hljs-comment"># 将alias_memory/master分支内容对checkout到summary仓库的branch_memory分支</span>git checkout -b branch_memory alias_memory/master<span class="hljs-comment"># 切换到summary仓库的master分支</span>git checkout master<span class="hljs-comment"># 将branch_memory分支合并到master分支;加 --allow-unrelated-histories 解决Git中fatal: refusing to merge unrelated histories</span>git merge branch_memory --allow-unrelated-histories</code></pre><h2 id="提交代码"><a href="#提交代码" class="headerlink" title="提交代码"></a>提交代码</h2><p>至此就将memory仓库的内容merge到了summary仓库中。</p><p>但是此时summary中目录结构和memory一样，就需要将新建一个memory目录，并将memory仓库中对应文件移到summary仓库的memory目录中。</p><pre><code class="hljs bash">mkdir memorygit mv xxx memorygit commit -s -m <span class="hljs-string">&quot;Merge memory.git to memory.&quot;</span>git push -u origin master</code></pre><p>依次重复上面内容，即可将多个git仓库合并到summary中。</p><p>可以用以下命令一次push所有分支到远程仓库</p><pre><code class="hljs bash">git push --all origin -u</code></pre>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用GitHubAction自动部署Gitbook</title>
    <link href="/2020/11/18/%E5%88%A9%E7%94%A8GitHubAction%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2Gitbook/"/>
    <url>/2020/11/18/%E5%88%A9%E7%94%A8GitHubAction%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2Gitbook/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="GitHub-Action"><a href="#GitHub-Action" class="headerlink" title="GitHub Action"></a>GitHub Action</h3><p>昨天在逛 <a href="https://hellogithub.com/">https://hellogithub.com/</a> 发现了一个有趣的项目： <a href="https://github.com/srcrs/BilibiliTask">Bilibili助手</a> 。作为一个5级N多年的B站老粉，我“啪”的一下就把代码给clone下来了,很快的。</p><p>然后昨晚打算细看代码时候发现，竟然还有比clone下来更加优雅的运行代码的方式。</p><p>那就是 <strong>GitHub Action</strong>。</p><p>后来了解到其实GitHub Action早就有了，奈何我玩GitHub这么久都没有特意关注这个按钮。</p><p>关于GitHub Actions的入门可以参看这篇文章：<a href="http://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html">GitHub Actions 入门教程</a>，我也是刚入门，就不展开了。</p><h3 id="Gitbook"><a href="#Gitbook" class="headerlink" title="Gitbook"></a>Gitbook</h3><p>正好最近有在接触gitbook，也去了解了一些将gitbook部署GitHub page上的方法，基本上做法都是手动切分支gh-pages，然后push生成的静态网页文件。</p><p>可参考：<a href="http://www.chengweiyang.cn/gitbook/github-pages/README.html">发布到 GitHub Pages</a></p><p>但总觉得这样的部署方式不够优雅。自然想到了上面的 GitHub Actions 方式。</p><p>网上收了一下，确实已经有人这么做了，并且分享了action代码。</p><h2 id="开工"><a href="#开工" class="headerlink" title="开工"></a>开工</h2><p><a href="https://github.com/marketplace/actions/gitbook-action">Gitbook Action</a></p><p>其实这里的How to Use已经写得十分详细了，照着做一遍基本就成功了。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><h3 id="记录一下可能遇到的问题"><a href="#记录一下可能遇到的问题" class="headerlink" title="记录一下可能遇到的问题"></a>记录一下可能遇到的问题</h3><ol><li><p>在这一步提交时候我点击commit按钮一直没有反应，索性就直接在本地新建文件，然后把代码贴进来了。然后再push上去，当然理论效果是一样的。</p><p><img src="/2020/11/18/%E5%88%A9%E7%94%A8GitHubAction%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2Gitbook/image-20201118154827614.png" alt="image-20201118154827614"></p></li></ol><ol start="2"><li><p>Actions 运行成功后可能不会立马生效，需要等待几分钟，特别时更新你的gitbook时候可能还会看到更新前的内容。这个和手动更新GitHub page是一样的道理的。</p><p><img src="/2020/11/18/%E5%88%A9%E7%94%A8GitHubAction%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2Gitbook/image-20201118155341897.png" alt="image-20201118155341897"></p></li><li><p>现在在GitHub上建仓库时，默认的主分支名字叫main，不再是master了。若是想直接使用上面别人写好的action脚本，最简单的方式是也是用master分支。</p></li><li><p>为了学习action.yml的写法，也是为了更加灵活，比如想调整触发的分支名，可以直接找到源码贴到自己的 yml 中。</p><p>贴一些我<a href="https://github.com/ZanderZhao/gitbook-action/blob/master/archive/v1.1-simple-gitbook-action.yml">参考</a>的：</p><pre><code class="hljs yml"><span class="hljs-comment"># @format</span><span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;Gitbook Action Build&#x27;</span><span class="hljs-attr">on:</span>    <span class="hljs-attr">push:</span>        <span class="hljs-attr">branches:</span>            <span class="hljs-bullet">-</span> <span class="hljs-string">master</span> <span class="hljs-comment"># trigger branch</span><span class="hljs-attr">jobs:</span>    <span class="hljs-attr">build:</span>        <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span>        <span class="hljs-attr">strategy:</span>            <span class="hljs-attr">matrix:</span>                <span class="hljs-attr">node-version:</span> [<span class="hljs-number">8</span>]        <span class="hljs-attr">steps:</span>            <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Use</span> <span class="hljs-string">Node.js</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">matrix.node-version</span> <span class="hljs-string">&#125;&#125;</span>              <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v1</span>              <span class="hljs-attr">with:</span>                  <span class="hljs-attr">node-version:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">matrix.node-version</span> <span class="hljs-string">&#125;&#125;</span>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">install_gitbook_plugins</span>              <span class="hljs-attr">run:</span> <span class="hljs-string">|</span>                  <span class="hljs-string">npm</span> <span class="hljs-string">install</span> <span class="hljs-string">gitbook-cli</span>  <span class="hljs-string">-g</span>                  <span class="hljs-string">gitbook</span> <span class="hljs-string">-v</span>                  <span class="hljs-string">gitbook</span> <span class="hljs-string">install</span>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">build_gitbook</span>              <span class="hljs-attr">run:</span> <span class="hljs-string">|</span>                  <span class="hljs-string">gitbook</span> <span class="hljs-string">build</span>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">push_to_pages</span>              <span class="hljs-attr">run:</span> <span class="hljs-string">|</span>                  <span class="hljs-string">cd</span> <span class="hljs-string">./_book</span>                  <span class="hljs-string">git</span> <span class="hljs-string">init</span>                  <span class="hljs-string">git</span> <span class="hljs-string">config</span> <span class="hljs-string">--local</span> <span class="hljs-string">user.name</span> <span class="hljs-string">&quot;$&#123;GITHUB_ACTOR&#125;&quot;</span>                  <span class="hljs-string">git</span> <span class="hljs-string">config</span> <span class="hljs-string">--local</span> <span class="hljs-string">user.email</span> <span class="hljs-string">&quot;$&#123;GITHUB_ACTOR&#125;@users.noreply.github.com&quot;</span>                  <span class="hljs-string">git</span> <span class="hljs-string">add</span> <span class="hljs-string">*</span>                  <span class="hljs-string">git</span> <span class="hljs-string">commit</span> <span class="hljs-string">-m</span> <span class="hljs-string">&quot;Update by gitbook-action&quot;</span>                  <span class="hljs-string">git</span> <span class="hljs-string">push</span> <span class="hljs-string">--force</span>  <span class="hljs-string">&quot;https://$&#123;GITHUB_ACTOR&#125;:$<span class="hljs-template-variable">&#123;&#123; secrets.PERSONAL_TOKEN &#125;&#125;</span>@github.com/$&#123;GITHUB_REPOSITORY&#125;.git&quot;</span> <span class="hljs-string">master:gh-pages</span></code></pre></li></ol><h3 id="理解action代码"><a href="#理解action代码" class="headerlink" title="理解action代码"></a>理解action代码</h3><p>其实简单分析一下上面的代码，不难发现逻辑和我们手动部署是差不多的。简单梳理下就是：</p><ol><li>checkout下来最新push的代码</li><li>用Nodejs环境装好gitbook</li><li>用gitbook编译出book</li><li>把book里的内容添加并push到gh-pages分支</li><li>到这就完了，后续GitHub会自动生成Page</li></ol><p>这样，只需要管写Markdown文章就好了，push到GitHub后会自动部署生成网页。</p><p>GitHub Actions真的好强大，更多好玩的有待探索。</p><p>如果是不想发布在 GitHub Page 上，而是自动部署到自己的服务器上，看到了这么一篇文章：<a href="https://zhuanlan.zhihu.com/p/103786779">Gitbook在云服务器上自动化部署</a>，这里用到的是Webhook，也是之前没有玩过，有待尝试。</p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GitHub Action</tag>
      
      <tag>Gitbook</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
